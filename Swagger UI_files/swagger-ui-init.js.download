
window.onload = function() {
  // Build a system
  var url = window.location.search.match(/url=([^&]+)/);
  if (url && url.length > 1) {
    url = decodeURIComponent(url[1]);
  } else {
    url = window.location.origin;
  }
  var options = {
  "swaggerDoc": {
    "openapi": "3.0.3",
    "info": {
      "title": "SafeSync API",
      "description": "This document contains the complete API reference for the SafeSync Project's MVP scope. It provides detailed information on all available endpoints, including user management, project handling, location tracking, document management, action registry, inspections, risk/hazard assessments, meetings, and report generation. The API utilizes JSON Web Tokens (JWT) for secure authentication and follows RESTful principles, and is designed to cater to different user roles such as Admins, Managers, and regular Users, ensuring controlled access and efficient project management.\n",
      "version": "1.0.1"
    },
    "servers": [
      {
        "url": "http://localhost:3000",
        "description": "Development Temporary Local Hosted Server"
      }
    ],
    "security": [
      {
        "BearerAuth": []
      }
    ],
    "tags": [
      {
        "name": "Authentication",
        "description": "User authentication and token management"
      },
      {
        "name": "User",
        "description": "User management operations"
      },
      {
        "name": "Projects",
        "description": "Project management operations"
      },
      {
        "name": "Locations",
        "description": "Location management operations"
      },
      {
        "name": "Activities",
        "description": "Activity management within projects"
      },
      {
        "name": "AddToActivity",
        "description": "Endpoints that involve adding items or entities to an activity, such as meetings, participants, or checklist responses."
      },
      {
        "name": "Inspections",
        "description": "Inspection management operations"
      },
      {
        "name": "Checklist Items",
        "description": "Checklist item management operations"
      },
      {
        "name": "Risk Assessment",
        "description": "Risk assessment and hazard management operations"
      },
      {
        "name": "Meetings",
        "description": "Meeting management operations"
      },
      {
        "name": "Action Register",
        "description": "Action management operations"
      },
      {
        "name": "Reports",
        "description": "Report generation operations"
      }
    ],
    "paths": {
      "/user/register": {
        "post": {
          "tags": [
            "Authentication"
          ],
          "summary": "Register a new user",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRegister"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Created - User registered successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_400"
                  },
                  "examples": {
                    "missingFields": {
                      "value": {
                        "error": true,
                        "message": "Request body incomplete, required fields are missing",
                        "missingFields": [
                          "email",
                          "password",
                          "first_name",
                          "last_name",
                          "access_level",
                          "employment_status",
                          "job_title",
                          "employment_type",
                          "external_user",
                          "mobile_number"
                        ]
                      }
                    },
                    "invalidInput": {
                      "value": {
                        "error": true,
                        "message": "Invalid input data",
                        "errors_Incurred": [
                          {
                            "field": "first_name",
                            "message": "Invalid 'first_name': must be a non-empty string and less than 255 characters."
                          },
                          {
                            "field": "last_name",
                            "message": "Invalid 'last_name': must be a non-empty string and less than 255 characters."
                          },
                          {
                            "field": "email",
                            "message": "Invalid 'email': must be in the format local-part@domain."
                          },
                          {
                            "field": "mobile_number",
                            "message": "Invalid 'mobile_number': must be an Australian phone number."
                          },
                          {
                            "field": "access_level",
                            "message": "Invalid 'access_level': must be one of 'TOP', 'MIDDLE', 'LOW'."
                          },
                          {
                            "field": "employment_status",
                            "message": "Invalid 'employment_status': must be one of 'Self Employed', 'Full Time', 'Casual', 'Volunteer', 'Shift Work', 'Part Time'."
                          },
                          {
                            "field": "job_title",
                            "message": "Invalid 'job_title': must be one of 'Worker', 'Supervisor', 'Manager', 'Senior Manager', 'Contractor', 'Supplier', 'Visitor'."
                          },
                          {
                            "field": "employment_type",
                            "message": "Invalid 'employment_type': must be one of 'Administration', 'Technical', 'Tradesperson', 'Apprentice/Trainee', 'Student', 'Professional'."
                          },
                          {
                            "field": "external_user",
                            "message": "Invalid 'external_user': must be a boolean (true or false)."
                          },
                          {
                            "field": "DOB",
                            "message": "Invalid 'DOB': must be a valid string date in DD/MM/YYYY format before today."
                          }
                        ]
                      }
                    },
                    "noUpdateData": {
                      "value": {
                        "error": true,
                        "message": "No update data provided"
                      }
                    }
                  }
                }
              }
            },
            "409": {
              "description": "Conflict",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_409"
                  },
                  "examples": {
                    "userExists": {
                      "value": {
                        "error": true,
                        "message": "User already exists"
                      }
                    },
                    "emailInUse": {
                      "value": {
                        "error": true,
                        "message": "Email already in use by another user"
                      }
                    },
                    "mobileInUse": {
                      "value": {
                        "error": true,
                        "message": "Mobile number already in use by another user"
                      }
                    },
                    "emailAndMobileInUse": {
                      "value": {
                        "error": true,
                        "message": "Mobile number and email already in use by another user"
                      }
                    },
                    "projectNameExists": {
                      "value": {
                        "error": true,
                        "message": "Project name already exists"
                      }
                    },
                    "locationExists": {
                      "value": {
                        "error": true,
                        "message": "A location with the same name and address already exists"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error has occured",
              "content": {
                "applications/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "Whoops! An internal server error has occured"
                  }
                }
              }
            }
          }
        }
      },
      "/user/login": {
        "post": {
          "tags": [
            "Authentication"
          ],
          "summary": "User login",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserLogin"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK - Login successful",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LoginResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_400"
                  },
                  "examples": {
                    "missingFields": {
                      "value": {
                        "error": true,
                        "message": "Request body incomplete, required fields are missing",
                        "missingFields": [
                          "email",
                          "password",
                          "first_name",
                          "last_name",
                          "access_level",
                          "employment_status",
                          "job_title",
                          "employment_type",
                          "external_user",
                          "mobile_number"
                        ]
                      }
                    },
                    "invalidInput": {
                      "value": {
                        "error": true,
                        "message": "Invalid input data",
                        "errors_Incurred": [
                          {
                            "field": "first_name",
                            "message": "Invalid 'first_name': must be a non-empty string and less than 255 characters."
                          },
                          {
                            "field": "last_name",
                            "message": "Invalid 'last_name': must be a non-empty string and less than 255 characters."
                          },
                          {
                            "field": "email",
                            "message": "Invalid 'email': must be in the format local-part@domain."
                          },
                          {
                            "field": "mobile_number",
                            "message": "Invalid 'mobile_number': must be an Australian phone number."
                          },
                          {
                            "field": "access_level",
                            "message": "Invalid 'access_level': must be one of 'TOP', 'MIDDLE', 'LOW'."
                          },
                          {
                            "field": "employment_status",
                            "message": "Invalid 'employment_status': must be one of 'Self Employed', 'Full Time', 'Casual', 'Volunteer', 'Shift Work', 'Part Time'."
                          },
                          {
                            "field": "job_title",
                            "message": "Invalid 'job_title': must be one of 'Worker', 'Supervisor', 'Manager', 'Senior Manager', 'Contractor', 'Supplier', 'Visitor'."
                          },
                          {
                            "field": "employment_type",
                            "message": "Invalid 'employment_type': must be one of 'Administration', 'Technical', 'Tradesperson', 'Apprentice/Trainee', 'Student', 'Professional'."
                          },
                          {
                            "field": "external_user",
                            "message": "Invalid 'external_user': must be a boolean (true or false)."
                          },
                          {
                            "field": "DOB",
                            "message": "Invalid 'DOB': must be a valid string date in DD/MM/YYYY format before today."
                          }
                        ]
                      }
                    },
                    "noUpdateData": {
                      "value": {
                        "error": true,
                        "message": "No update data provided"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_401"
                  },
                  "examples": {
                    "incorrectCredentials": {
                      "value": {
                        "error": true,
                        "message": "Incorrect combination of email/phone and password"
                      }
                    },
                    "userNotFound": {
                      "value": {
                        "error": true,
                        "message": "User not found"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error has occured",
              "content": {
                "applications/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "Whoops! An internal server error has occured"
                  }
                }
              }
            }
          }
        }
      },
      "/user/refresh-token": {
        "post": {
          "tags": [
            "Authentication"
          ],
          "summary": "Refresh user's bearer token",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefreshTokenRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK - Token refreshed successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LoginResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_400"
                  },
                  "examples": {
                    "missingFields": {
                      "value": {
                        "error": true,
                        "message": "Request body incomplete, required fields are missing",
                        "missingFields": [
                          "email",
                          "password",
                          "first_name",
                          "last_name",
                          "access_level",
                          "employment_status",
                          "job_title",
                          "employment_type",
                          "external_user",
                          "mobile_number"
                        ]
                      }
                    },
                    "invalidInput": {
                      "value": {
                        "error": true,
                        "message": "Invalid input data",
                        "errors_Incurred": [
                          {
                            "field": "first_name",
                            "message": "Invalid 'first_name': must be a non-empty string and less than 255 characters."
                          },
                          {
                            "field": "last_name",
                            "message": "Invalid 'last_name': must be a non-empty string and less than 255 characters."
                          },
                          {
                            "field": "email",
                            "message": "Invalid 'email': must be in the format local-part@domain."
                          },
                          {
                            "field": "mobile_number",
                            "message": "Invalid 'mobile_number': must be an Australian phone number."
                          },
                          {
                            "field": "access_level",
                            "message": "Invalid 'access_level': must be one of 'TOP', 'MIDDLE', 'LOW'."
                          },
                          {
                            "field": "employment_status",
                            "message": "Invalid 'employment_status': must be one of 'Self Employed', 'Full Time', 'Casual', 'Volunteer', 'Shift Work', 'Part Time'."
                          },
                          {
                            "field": "job_title",
                            "message": "Invalid 'job_title': must be one of 'Worker', 'Supervisor', 'Manager', 'Senior Manager', 'Contractor', 'Supplier', 'Visitor'."
                          },
                          {
                            "field": "employment_type",
                            "message": "Invalid 'employment_type': must be one of 'Administration', 'Technical', 'Tradesperson', 'Apprentice/Trainee', 'Student', 'Professional'."
                          },
                          {
                            "field": "external_user",
                            "message": "Invalid 'external_user': must be a boolean (true or false)."
                          },
                          {
                            "field": "DOB",
                            "message": "Invalid 'DOB': must be a valid string date in DD/MM/YYYY format before today."
                          }
                        ]
                      }
                    },
                    "noUpdateData": {
                      "value": {
                        "error": true,
                        "message": "No update data provided"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_401"
                  },
                  "examples": {
                    "incorrectCredentials": {
                      "value": {
                        "error": true,
                        "message": "Incorrect combination of email/phone and password"
                      }
                    },
                    "userNotFound": {
                      "value": {
                        "error": true,
                        "message": "User not found"
                      }
                    }
                  }
                }
              }
            },
            "409": {
              "description": "Conflict",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_409"
                  },
                  "examples": {
                    "userExists": {
                      "value": {
                        "error": true,
                        "message": "User already exists"
                      }
                    },
                    "emailInUse": {
                      "value": {
                        "error": true,
                        "message": "Email already in use by another user"
                      }
                    },
                    "mobileInUse": {
                      "value": {
                        "error": true,
                        "message": "Mobile number already in use by another user"
                      }
                    },
                    "emailAndMobileInUse": {
                      "value": {
                        "error": true,
                        "message": "Mobile number and email already in use by another user"
                      }
                    },
                    "projectNameExists": {
                      "value": {
                        "error": true,
                        "message": "Project name already exists"
                      }
                    },
                    "locationExists": {
                      "value": {
                        "error": true,
                        "message": "A location with the same name and address already exists"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error has occured",
              "content": {
                "applications/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "Whoops! An internal server error has occured"
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/user/{userID}/profile": {
        "get": {
          "tags": [
            "User"
          ],
          "summary": "Get user profile",
          "parameters": [
            {
              "name": "userID",
              "in": "path",
              "required": true,
              "style": "simple",
              "explode": false,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK - User profile retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserProfile"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request - Invalid userID",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_400"
                  },
                  "examples": {
                    "invalidID": {
                      "value": {
                        "error": true,
                        "message": "Invalid userID"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_404"
                  },
                  "examples": {
                    "userNotFound": {
                      "value": {
                        "error": true,
                        "message": "User not found"
                      }
                    },
                    "projectNotFound": {
                      "value": {
                        "error": true,
                        "message": "Project not found"
                      }
                    },
                    "locationNotFound": {
                      "value": {
                        "error": true,
                        "message": "Location not found"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error has occured",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "Whoops! An internal server error has occured"
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/user/{userID}/update/password": {
        "put": {
          "tags": [
            "User"
          ],
          "summary": "Update user password",
          "parameters": [
            {
              "name": "userID",
              "in": "path",
              "required": true,
              "style": "simple",
              "explode": false,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdatePassword"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Password updated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UpdatePasswordResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_400"
                  },
                  "examples": {
                    "missingFields": {
                      "value": {
                        "error": true,
                        "message": "Request body incomplete, required fields are missing",
                        "missingFields": [
                          "email",
                          "password",
                          "first_name",
                          "last_name",
                          "access_level",
                          "employment_status",
                          "job_title",
                          "employment_type",
                          "external_user",
                          "mobile_number"
                        ]
                      }
                    },
                    "invalidInput": {
                      "value": {
                        "error": true,
                        "message": "Invalid input data",
                        "errors_Incurred": [
                          {
                            "field": "first_name",
                            "message": "Invalid 'first_name': must be a non-empty string and less than 255 characters."
                          },
                          {
                            "field": "last_name",
                            "message": "Invalid 'last_name': must be a non-empty string and less than 255 characters."
                          },
                          {
                            "field": "email",
                            "message": "Invalid 'email': must be in the format local-part@domain."
                          },
                          {
                            "field": "mobile_number",
                            "message": "Invalid 'mobile_number': must be an Australian phone number."
                          },
                          {
                            "field": "access_level",
                            "message": "Invalid 'access_level': must be one of 'TOP', 'MIDDLE', 'LOW'."
                          },
                          {
                            "field": "employment_status",
                            "message": "Invalid 'employment_status': must be one of 'Self Employed', 'Full Time', 'Casual', 'Volunteer', 'Shift Work', 'Part Time'."
                          },
                          {
                            "field": "job_title",
                            "message": "Invalid 'job_title': must be one of 'Worker', 'Supervisor', 'Manager', 'Senior Manager', 'Contractor', 'Supplier', 'Visitor'."
                          },
                          {
                            "field": "employment_type",
                            "message": "Invalid 'employment_type': must be one of 'Administration', 'Technical', 'Tradesperson', 'Apprentice/Trainee', 'Student', 'Professional'."
                          },
                          {
                            "field": "external_user",
                            "message": "Invalid 'external_user': must be a boolean (true or false)."
                          },
                          {
                            "field": "DOB",
                            "message": "Invalid 'DOB': must be a valid string date in DD/MM/YYYY format before today."
                          }
                        ]
                      }
                    },
                    "noUpdateData": {
                      "value": {
                        "error": true,
                        "message": "No update data provided"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_401"
                  },
                  "examples": {
                    "incorrectCredentials": {
                      "value": {
                        "error": true,
                        "message": "Incorrect combination of email/phone and password"
                      }
                    },
                    "userNotFound": {
                      "value": {
                        "error": true,
                        "message": "User not found"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_404"
                  },
                  "examples": {
                    "userNotFound": {
                      "value": {
                        "error": true,
                        "message": "User not found"
                      }
                    },
                    "projectNotFound": {
                      "value": {
                        "error": true,
                        "message": "Project not found"
                      }
                    },
                    "locationNotFound": {
                      "value": {
                        "error": true,
                        "message": "Location not found"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error has occured",
              "content": {
                "applications/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "Whoops! An internal server error has occured"
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/user/{userID}/update/pin": {
        "put": {
          "tags": [
            "User"
          ],
          "summary": "Update user PIN",
          "parameters": [
            {
              "name": "userID",
              "in": "path",
              "required": true,
              "style": "simple",
              "explode": false,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdatePin"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "PIN updated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UpdatePinResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_400"
                  },
                  "examples": {
                    "missingFields": {
                      "value": {
                        "error": true,
                        "message": "Request body incomplete, required fields are missing",
                        "missingFields": [
                          "email",
                          "password",
                          "first_name",
                          "last_name",
                          "access_level",
                          "employment_status",
                          "job_title",
                          "employment_type",
                          "external_user",
                          "mobile_number"
                        ]
                      }
                    },
                    "invalidInput": {
                      "value": {
                        "error": true,
                        "message": "Invalid input data",
                        "errors_Incurred": [
                          {
                            "field": "first_name",
                            "message": "Invalid 'first_name': must be a non-empty string and less than 255 characters."
                          },
                          {
                            "field": "last_name",
                            "message": "Invalid 'last_name': must be a non-empty string and less than 255 characters."
                          },
                          {
                            "field": "email",
                            "message": "Invalid 'email': must be in the format local-part@domain."
                          },
                          {
                            "field": "mobile_number",
                            "message": "Invalid 'mobile_number': must be an Australian phone number."
                          },
                          {
                            "field": "access_level",
                            "message": "Invalid 'access_level': must be one of 'TOP', 'MIDDLE', 'LOW'."
                          },
                          {
                            "field": "employment_status",
                            "message": "Invalid 'employment_status': must be one of 'Self Employed', 'Full Time', 'Casual', 'Volunteer', 'Shift Work', 'Part Time'."
                          },
                          {
                            "field": "job_title",
                            "message": "Invalid 'job_title': must be one of 'Worker', 'Supervisor', 'Manager', 'Senior Manager', 'Contractor', 'Supplier', 'Visitor'."
                          },
                          {
                            "field": "employment_type",
                            "message": "Invalid 'employment_type': must be one of 'Administration', 'Technical', 'Tradesperson', 'Apprentice/Trainee', 'Student', 'Professional'."
                          },
                          {
                            "field": "external_user",
                            "message": "Invalid 'external_user': must be a boolean (true or false)."
                          },
                          {
                            "field": "DOB",
                            "message": "Invalid 'DOB': must be a valid string date in DD/MM/YYYY format before today."
                          }
                        ]
                      }
                    },
                    "noUpdateData": {
                      "value": {
                        "error": true,
                        "message": "No update data provided"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_401"
                  },
                  "examples": {
                    "incorrectCredentials": {
                      "value": {
                        "error": true,
                        "message": "Incorrect combination of email/phone and password"
                      }
                    },
                    "userNotFound": {
                      "value": {
                        "error": true,
                        "message": "User not found"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_404"
                  },
                  "examples": {
                    "userNotFound": {
                      "value": {
                        "error": true,
                        "message": "User not found"
                      }
                    },
                    "projectNotFound": {
                      "value": {
                        "error": true,
                        "message": "Project not found"
                      }
                    },
                    "locationNotFound": {
                      "value": {
                        "error": true,
                        "message": "Location not found"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error has occured",
              "content": {
                "applications/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "Whoops! An internal server error has occured"
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/user/{userID}/update": {
        "put": {
          "tags": [
            "User"
          ],
          "summary": "Update user details",
          "parameters": [
            {
              "name": "userID",
              "in": "path",
              "required": true,
              "style": "simple",
              "explode": false,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUser"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "User updated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UpdateUserResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_400"
                  },
                  "examples": {
                    "missingFields": {
                      "value": {
                        "error": true,
                        "message": "Request body incomplete, required fields are missing",
                        "missingFields": [
                          "email",
                          "password",
                          "first_name",
                          "last_name",
                          "access_level",
                          "employment_status",
                          "job_title",
                          "employment_type",
                          "external_user",
                          "mobile_number"
                        ]
                      }
                    },
                    "invalidInput": {
                      "value": {
                        "error": true,
                        "message": "Invalid input data",
                        "errors_Incurred": [
                          {
                            "field": "first_name",
                            "message": "Invalid 'first_name': must be a non-empty string and less than 255 characters."
                          },
                          {
                            "field": "last_name",
                            "message": "Invalid 'last_name': must be a non-empty string and less than 255 characters."
                          },
                          {
                            "field": "email",
                            "message": "Invalid 'email': must be in the format local-part@domain."
                          },
                          {
                            "field": "mobile_number",
                            "message": "Invalid 'mobile_number': must be an Australian phone number."
                          },
                          {
                            "field": "access_level",
                            "message": "Invalid 'access_level': must be one of 'TOP', 'MIDDLE', 'LOW'."
                          },
                          {
                            "field": "employment_status",
                            "message": "Invalid 'employment_status': must be one of 'Self Employed', 'Full Time', 'Casual', 'Volunteer', 'Shift Work', 'Part Time'."
                          },
                          {
                            "field": "job_title",
                            "message": "Invalid 'job_title': must be one of 'Worker', 'Supervisor', 'Manager', 'Senior Manager', 'Contractor', 'Supplier', 'Visitor'."
                          },
                          {
                            "field": "employment_type",
                            "message": "Invalid 'employment_type': must be one of 'Administration', 'Technical', 'Tradesperson', 'Apprentice/Trainee', 'Student', 'Professional'."
                          },
                          {
                            "field": "external_user",
                            "message": "Invalid 'external_user': must be a boolean (true or false)."
                          },
                          {
                            "field": "DOB",
                            "message": "Invalid 'DOB': must be a valid string date in DD/MM/YYYY format before today."
                          }
                        ]
                      }
                    },
                    "noUpdateData": {
                      "value": {
                        "error": true,
                        "message": "No update data provided"
                      }
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UnauthorizedFieldsError"
                  },
                  "example": {
                    "error": true,
                    "message": "You are attempting to change fields you are not authorized for",
                    "unchangeableFields": [
                      "bearer_token",
                      "userID",
                      "email_hash",
                      "pin",
                      "mobile_hash"
                    ]
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_404"
                  },
                  "examples": {
                    "userNotFound": {
                      "value": {
                        "error": true,
                        "message": "User not found"
                      }
                    },
                    "projectNotFound": {
                      "value": {
                        "error": true,
                        "message": "Project not found"
                      }
                    },
                    "locationNotFound": {
                      "value": {
                        "error": true,
                        "message": "Location not found"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error has occured",
              "content": {
                "applications/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "Whoops! An internal server error has occured"
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/user/{userID}/remove": {
        "delete": {
          "tags": [
            "User"
          ],
          "summary": "Delete user",
          "parameters": [
            {
              "name": "userID",
              "in": "path",
              "required": true,
              "style": "simple",
              "explode": false,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "User deleted successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_404"
                  },
                  "examples": {
                    "userNotFound": {
                      "value": {
                        "error": true,
                        "message": "User not found"
                      }
                    },
                    "projectNotFound": {
                      "value": {
                        "error": true,
                        "message": "Project not found"
                      }
                    },
                    "locationNotFound": {
                      "value": {
                        "error": true,
                        "message": "Location not found"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error has occured",
              "content": {
                "applications/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "Whoops! An internal server error has occured"
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/user/search": {
        "get": {
          "tags": [
            "User"
          ],
          "summary": "Search users",
          "parameters": [
            {
              "name": "userID",
              "in": "query",
              "required": false,
              "style": "form",
              "explode": true,
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "first_name",
              "in": "query",
              "required": false,
              "style": "form",
              "explode": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "last_name",
              "in": "query",
              "required": false,
              "style": "form",
              "explode": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "email",
              "in": "query",
              "required": false,
              "style": "form",
              "explode": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "mobile_number",
              "in": "query",
              "required": false,
              "style": "form",
              "explode": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "access_level",
              "in": "query",
              "required": false,
              "style": "form",
              "explode": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "employment_status",
              "in": "query",
              "required": false,
              "style": "form",
              "explode": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "job_title",
              "in": "query",
              "required": false,
              "style": "form",
              "explode": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "employment_type",
              "in": "query",
              "required": false,
              "style": "form",
              "explode": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "external_user",
              "in": "query",
              "required": false,
              "style": "form",
              "explode": true,
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "List of users matching the criteria",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/UserSearchResult"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_404"
                  },
                  "examples": {
                    "userNotFound": {
                      "value": {
                        "error": true,
                        "message": "User not found"
                      }
                    },
                    "projectNotFound": {
                      "value": {
                        "error": true,
                        "message": "Project not found"
                      }
                    },
                    "locationNotFound": {
                      "value": {
                        "error": true,
                        "message": "Location not found"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error has occured",
              "content": {
                "applications/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "Whoops! An internal server error has occured"
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/project/search": {
        "get": {
          "tags": [
            "Projects"
          ],
          "summary": "Retrieve a list of all projects with optional search parameters",
          "parameters": [
            {
              "name": "companyName",
              "in": "query",
              "required": false,
              "style": "form",
              "explode": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "projectName",
              "in": "query",
              "required": false,
              "style": "form",
              "explode": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "startDate",
              "in": "query",
              "required": false,
              "style": "form",
              "explode": true,
              "schema": {
                "type": "string",
                "format": "date"
              }
            },
            {
              "name": "endDate",
              "in": "query",
              "required": false,
              "style": "form",
              "explode": true,
              "schema": {
                "type": "string",
                "format": "date"
              }
            },
            {
              "name": "status",
              "in": "query",
              "required": false,
              "style": "form",
              "explode": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "required": false,
              "style": "form",
              "explode": true,
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "offset",
              "in": "query",
              "required": false,
              "style": "form",
              "explode": true,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "A list of projects",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Project"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_404"
                  },
                  "examples": {
                    "userNotFound": {
                      "value": {
                        "error": true,
                        "message": "User not found"
                      }
                    },
                    "projectNotFound": {
                      "value": {
                        "error": true,
                        "message": "Project not found"
                      }
                    },
                    "locationNotFound": {
                      "value": {
                        "error": true,
                        "message": "Location not found"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error has occured",
              "content": {
                "applications/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "Whoops! An internal server error has occured"
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/project/{projectID}/details": {
        "get": {
          "tags": [
            "Projects"
          ],
          "summary": "Get project details",
          "parameters": [
            {
              "name": "projectID",
              "in": "path",
              "required": true,
              "style": "simple",
              "explode": false,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Project"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request - Invalid projectID",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_400"
                  },
                  "examples": {
                    "invalidID": {
                      "value": {
                        "error": true,
                        "message": "Invalid projectID"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_404"
                  },
                  "examples": {
                    "projectNotFound": {
                      "value": {
                        "error": true,
                        "message": "Project not found"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error has occurred",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "Whoops! An internal server error has occurred"
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/project/{projectID}/users": {
        "get": {
          "tags": [
            "Projects"
          ],
          "summary": "Get project users",
          "parameters": [
            {
              "name": "projectID",
              "in": "path",
              "required": true,
              "style": "simple",
              "explode": false,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/UserProfile"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_404"
                  },
                  "examples": {
                    "userNotFound": {
                      "value": {
                        "error": true,
                        "message": "User not found"
                      }
                    },
                    "projectNotFound": {
                      "value": {
                        "error": true,
                        "message": "Project not found"
                      }
                    },
                    "locationNotFound": {
                      "value": {
                        "error": true,
                        "message": "Location not found"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error has occured",
              "content": {
                "applications/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "Whoops! An internal server error has occured"
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/project/create": {
        "post": {
          "tags": [
            "Projects"
          ],
          "summary": "Create a new project",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCreate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Project created successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProjectCreatedResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request - Missing required fields",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_400"
                  },
                  "examples": {
                    "missingFields": {
                      "value": {
                        "error": true,
                        "message": "Project cannot be created due to missing required fields",
                        "missingFields": [
                          "company_name",
                          "project_name",
                          "managerID",
                          "start_date",
                          "end_date"
                        ]
                      }
                    }
                  }
                }
              }
            },
            "422": {
              "description": "Unprocessable Entity - Validation errors",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_422"
                  },
                  "examples": {
                    "invalidInput": {
                      "value": {
                        "error": true,
                        "message": "Invalid input data",
                        "errors_Incurred": [
                          {
                            "field": "start_date",
                            "message": "Start date must be before the end date."
                          },
                          {
                            "field": "managerID",
                            "message": "ManagerID does not exist."
                          },
                          {
                            "field": "project_name",
                            "message": "Project name already exists."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error has occurred",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "Whoops! An internal server error has occurred"
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/project/{projectID}/remove": {
        "delete": {
          "tags": [
            "Projects"
          ],
          "summary": "Remove a project",
          "parameters": [
            {
              "name": "projectID",
              "in": "path",
              "required": true,
              "style": "simple",
              "explode": false,
              "schema": {
                "type": "integer"
              },
              "description": "ID of the project to be removed"
            }
          ],
          "responses": {
            "200": {
              "description": "Project removed successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request - Invalid projectID",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_400"
                  },
                  "examples": {
                    "invalidProjectID": {
                      "value": {
                        "error": true,
                        "message": "Invalid projectID"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found - Project not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_404"
                  },
                  "examples": {
                    "projectNotFound": {
                      "value": {
                        "error": true,
                        "message": "Project not found"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "Whoops! An internal server error has occurred"
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/project/{projectID}/update": {
        "put": {
          "tags": [
            "Projects"
          ],
          "summary": "Update a project",
          "parameters": [
            {
              "name": "projectID",
              "in": "path",
              "required": true,
              "style": "simple",
              "explode": false,
              "schema": {
                "type": "integer"
              },
              "description": "ID of the project to update"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Project updated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request - Invalid projectID or missing update data",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_400"
                  },
                  "examples": {
                    "invalidProjectID": {
                      "value": {
                        "error": true,
                        "message": "Invalid projectID, must be an integer"
                      }
                    },
                    "noUpdateData": {
                      "value": {
                        "error": true,
                        "message": "No update data provided"
                      }
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden - Trying to update non-editable fields",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_403"
                  },
                  "examples": {
                    "nonEditableFields": {
                      "value": {
                        "error": true,
                        "message": "You are attempting to change fields you are not authorised for.",
                        "unchangeableFields": [
                          "projectID"
                        ]
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found - Project or manager not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_404"
                  },
                  "examples": {
                    "projectNotFound": {
                      "value": {
                        "error": true,
                        "message": "Project not found"
                      }
                    },
                    "managerNotFound": {
                      "value": {
                        "error": true,
                        "message": "ManagerID does not exist"
                      }
                    }
                  }
                }
              }
            },
            "422": {
              "description": "Unprocessable Entity - Validation errors",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_422"
                  },
                  "examples": {
                    "validationErrors": {
                      "value": {
                        "error": true,
                        "message": "Invalid input data",
                        "errors_Incurred": [
                          {
                            "field": "start_date",
                            "message": "Start date must be before the end date"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "Whoops! An internal server error has occurred"
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/location/search": {
        "get": {
          "tags": [
            "Locations"
          ],
          "summary": "Get a list of all locations",
          "parameters": [
            {
              "name": "name",
              "in": "query",
              "required": false,
              "style": "form",
              "explode": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "city",
              "in": "query",
              "required": false,
              "style": "form",
              "explode": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "state",
              "in": "query",
              "required": false,
              "style": "form",
              "explode": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "List of locations retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Location"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_404"
                  },
                  "examples": {
                    "userNotFound": {
                      "value": {
                        "error": true,
                        "message": "User not found"
                      }
                    },
                    "projectNotFound": {
                      "value": {
                        "error": true,
                        "message": "Project not found"
                      }
                    },
                    "locationNotFound": {
                      "value": {
                        "error": true,
                        "message": "Location not found"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error has occured",
              "content": {
                "applications/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "Whoops! An internal server error has occured"
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/location/create": {
        "post": {
          "tags": [
            "Locations"
          ],
          "summary": "Add a new location",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationCreate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Location added successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Location"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_400"
                  },
                  "examples": {
                    "missingFields": {
                      "value": {
                        "error": true,
                        "message": "Request body incomplete, required fields are missing",
                        "missingFields": [
                          "name",
                          "address",
                          "city",
                          "suburb",
                          "state",
                          "post_code"
                        ]
                      }
                    }
                  }
                }
              }
            },
            "409": {
              "description": "Conflict - Location with the same name and address already exists",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_409"
                  },
                  "examples": {
                    "locationExists": {
                      "value": {
                        "error": true,
                        "message": "A location with the same name and address already exists"
                      }
                    }
                  }
                }
              }
            },
            "422": {
              "description": "Unprocessable Entity - Validation errors in the input data",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_422"
                  },
                  "examples": {
                    "invalidInput": {
                      "value": {
                        "error": true,
                        "message": "Invalid input data",
                        "errors_Incurred": [
                          {
                            "field": "post_code",
                            "message": "Post code must be a valid 4-digit number."
                          },
                          {
                            "field": "name",
                            "message": "Name must be a non-empty string."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error has occured",
              "content": {
                "applications/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "Whoops! An internal server error has occured"
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/location/{locationID}/details": {
        "get": {
          "tags": [
            "Locations"
          ],
          "summary": "Get details of a specific location",
          "parameters": [
            {
              "name": "locationID",
              "in": "path",
              "required": true,
              "style": "simple",
              "explode": false,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Location details retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Location"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request - Invalid locationID",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_400"
                  },
                  "examples": {
                    "invalidLocationID": {
                      "value": {
                        "error": true,
                        "message": "Invalid locationID"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_404"
                  },
                  "examples": {
                    "locationNotFound": {
                      "value": {
                        "error": true,
                        "message": "Location not found"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error has occurred",
              "content": {
                "applications/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "Whoops! An internal server error has occurred"
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/location/{locationID}/update": {
        "put": {
          "tags": [
            "Locations"
          ],
          "summary": "Update a specific location",
          "parameters": [
            {
              "name": "locationID",
              "in": "path",
              "required": true,
              "style": "simple",
              "explode": false,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Location updated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Location"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_400"
                  },
                  "examples": {
                    "missingFields": {
                      "value": {
                        "error": true,
                        "message": "Request body incomplete, required fields are missing"
                      }
                    },
                    "noUpdateData": {
                      "value": {
                        "error": true,
                        "message": "No update data provided"
                      }
                    },
                    "invalidLocationID": {
                      "value": {
                        "error": true,
                        "message": "Invalid locationID"
                      }
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_403"
                  },
                  "examples": {
                    "unchangeableFields": {
                      "value": {
                        "error": true,
                        "message": "You are attempting to change fields you are not authorised for.",
                        "unchangeableFields": [
                          "locationID",
                          "address_hash"
                        ]
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_404"
                  },
                  "examples": {
                    "locationNotFound": {
                      "value": {
                        "error": true,
                        "message": "Location not found"
                      }
                    }
                  }
                }
              }
            },
            "422": {
              "description": "Unprocessable Entity - Validation errors",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_422"
                  },
                  "examples": {
                    "validationErrors": {
                      "value": {
                        "error": true,
                        "message": "Invalid input data",
                        "errors_Incurred": [
                          {
                            "field": "name and address",
                            "message": "A location with the same name and address already exists."
                          },
                          {
                            "field": "state",
                            "message": "New state must maintain current post codes validity"
                          },
                          {
                            "field": "post_code",
                            "message": "New post code must be valid for current state"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error has occured",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "Whoops! An internal server error has occured"
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/location/{locationID}/remove": {
        "delete": {
          "tags": [
            "Locations"
          ],
          "summary": "Remove a specific location",
          "parameters": [
            {
              "name": "locationID",
              "in": "path",
              "required": true,
              "style": "simple",
              "explode": false,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Location removed successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request - Invalid locationID",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_400"
                  },
                  "examples": {
                    "invalidLocationID": {
                      "value": {
                        "error": true,
                        "message": "Invalid locationID"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found - Location not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_404"
                  },
                  "examples": {
                    "locationNotFound": {
                      "value": {
                        "error": true,
                        "message": "Location not found"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "Whoops! An internal server error has occured"
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/activity/search": {
        "get": {
          "tags": [
            "Activities"
          ],
          "summary": "Retrieve all activities with optional search parameters",
          "parameters": [
            {
              "name": "activity_name",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string"
              },
              "description": "Filter by activity name (supports partial matching)"
            },
            {
              "name": "projectID",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer"
              },
              "description": "Filter by project ID"
            },
            {
              "name": "person_responsible",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer"
              },
              "description": "Filter by the person responsible (user ID)"
            },
            {
              "name": "progress",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string",
                "enum": [
                  "On Target",
                  "Overdue",
                  "Suspended",
                  "Cancelled",
                  "Completed"
                ]
              },
              "description": "Filter by activity progress status"
            },
            {
              "name": "location",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer"
              },
              "description": "Filter by location (location ID)"
            },
            {
              "name": "start_date",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string",
                "format": "date"
              },
              "description": "Filter by the start date of the activity"
            },
            {
              "name": "end_date",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string",
                "format": "date"
              },
              "description": "Filter by the end date of the activity"
            },
            {
              "name": "limit",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer"
              },
              "description": "Limit the number of results returned"
            },
            {
              "name": "offset",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer"
              },
              "description": "Offset the starting point of the results"
            }
          ],
          "responses": {
            "200": {
              "description": "A list of activities",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Activity"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "No activities found matching the given criteria",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_404"
                  },
                  "examples": {
                    "noActivitiesFound": {
                      "value": {
                        "error": true,
                        "message": "No activities found matching the given criteria"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error has occurred",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "Whoops! An internal server error has occurred"
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/activity/{activityID}/details": {
        "get": {
          "tags": [
            "Activities"
          ],
          "summary": "Retrieve details of a specific activity by its ID",
          "parameters": [
            {
              "name": "activityID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              },
              "description": "The ID of the activity to retrieve"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Activity"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid activityID",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_400"
                  },
                  "examples": {
                    "invalidActivityID": {
                      "value": {
                        "error": true,
                        "message": "Invalid activityID"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Activity not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_404"
                  },
                  "examples": {
                    "activityNotFound": {
                      "value": {
                        "error": true,
                        "message": "Activity not found"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error has occurred",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "Whoops! An internal server error has occurred"
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/activity/create": {
        "post": {
          "tags": [
            "Activities"
          ],
          "summary": "Add a new activity to a project",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityCreate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Activity created successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Activity"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request - Missing or invalid input data",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_400"
                  },
                  "examples": {
                    "missingFields": {
                      "value": {
                        "error": true,
                        "message": "Activity cannot be created due to missing required fields",
                        "missingFields": [
                          "activity_name",
                          "projectID",
                          "person_responsible",
                          "location",
                          "start_date",
                          "end_date"
                        ]
                      }
                    },
                    "invalidInput": {
                      "value": {
                        "error": true,
                        "message": "Invalid input data",
                        "errors_Incurred": [
                          {
                            "field": "start_date",
                            "message": "Start date must be within the project period"
                          },
                          {
                            "field": "person_responsible",
                            "message": "Person responsible does not exist"
                          },
                          {
                            "field": "location",
                            "message": "Location does not exist"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found - Project, person responsible, or location not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_404"
                  },
                  "examples": {
                    "projectNotFound": {
                      "value": {
                        "error": true,
                        "message": "ProjectID does not exist"
                      }
                    },
                    "personNotFound": {
                      "value": {
                        "error": true,
                        "message": "Person responsible does not exist"
                      }
                    },
                    "locationNotFound": {
                      "value": {
                        "error": true,
                        "message": "Location does not exist"
                      }
                    }
                  }
                }
              }
            },
            "422": {
              "description": "Unprocessable Entity - Validation errors",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_422"
                  },
                  "examples": {
                    "validationErrors": {
                      "value": {
                        "error": true,
                        "message": "Invalid input data",
                        "errors_Incurred": [
                          {
                            "field": "start_date",
                            "message": "Start date must be before end date"
                          },
                          {
                            "field": "start_date",
                            "message": "Start date must be within the project period"
                          },
                          {
                            "field": "person_responsible",
                            "message": "Person responsible does not exist"
                          },
                          {
                            "field": "location",
                            "message": "Location does not exist"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error has occurred",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "Whoops! An internal server error has occurred"
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/activity/{activityID}/remove": {
        "delete": {
          "tags": [
            "Activities"
          ],
          "summary": "Remove an existing activity by its ID",
          "parameters": [
            {
              "name": "activityID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              },
              "description": "The ID of the activity to remove"
            }
          ],
          "responses": {
            "200": {
              "description": "Activity removed successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  },
                  "example": {
                    "success": true,
                    "message": "Activity with ID 123 removed successfully."
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request - Invalid activityID",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_400"
                  },
                  "examples": {
                    "invalidActivityID": {
                      "value": {
                        "error": true,
                        "message": "Invalid activityID"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found - Activity not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_404"
                  },
                  "examples": {
                    "activityNotFound": {
                      "value": {
                        "error": true,
                        "message": "Activity not found"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error has occurred",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "Whoops! An internal server error has occurred"
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/activity/{activityID}/update": {
        "put": {
          "tags": [
            "Activities"
          ],
          "summary": "Update details of an existing activity",
          "parameters": [
            {
              "name": "activityID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              },
              "description": "The ID of the activity to update"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Activity updated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ActivityUpdateResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_400"
                  },
                  "examples": {
                    "invalidActivityID": {
                      "value": {
                        "error": true,
                        "message": "Invalid activityID, must be an integer"
                      }
                    },
                    "noUpdateData": {
                      "value": {
                        "error": true,
                        "message": "No update data provided for activity"
                      }
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden - Unauthorized field changes",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_403"
                  },
                  "examples": {
                    "unauthorizedFields": {
                      "value": {
                        "error": true,
                        "message": "You are attempting to change fields you are not authorized for.",
                        "unchangeableFields": [
                          "activityID",
                          "projectID"
                        ]
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found - Activity not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_404"
                  },
                  "examples": {
                    "activityNotFound": {
                      "value": {
                        "error": true,
                        "message": "Activity not found"
                      }
                    }
                  }
                }
              }
            },
            "422": {
              "description": "Unprocessable Entity - Validation errors",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_422"
                  },
                  "examples": {
                    "validationErrors": {
                      "value": {
                        "error": true,
                        "message": "Invalid input data",
                        "errors_Incurred": [
                          {
                            "field": "start_date",
                            "message": "Start date must be before the end date"
                          },
                          {
                            "field": "location",
                            "message": "Location does not exist"
                          },
                          {
                            "field": "person_responsible",
                            "message": "Person responsible does not exist"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error has occurred",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "Whoops! An internal server error has occurred"
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/activity/{activityID}/registry/users": {
        "get": {
          "tags": [
            "Activities"
          ],
          "summary": "Get all users registered to an activity",
          "parameters": [
            {
              "name": "activityID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              },
              "description": "The ID of the activity to retrieve users for"
            }
          ],
          "responses": {
            "200": {
              "description": "List of users registered to the activity",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "users": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/UserProfile"
                        }
                      }
                    }
                  }
                }
              }
            },
            "204": {
              "description": "No users registered for this activity"
            },
            "400": {
              "description": "Bad Request - Invalid activityID",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_400"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found - Activity not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_404"
                  },
                  "examples": {
                    "activityNotFound": {
                      "value": {
                        "error": true,
                        "message": "Activity not found"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "Whoops! An internal server error has occurred"
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/activity/{activityID}/registry/user/{userID}": {
        "get": {
          "tags": [
            "Activities"
          ],
          "summary": "Get details of a user in an activity",
          "parameters": [
            {
              "name": "activityID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              },
              "description": "The ID of the activity"
            },
            {
              "name": "userID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              },
              "description": "The ID of the user"
            }
          ],
          "responses": {
            "200": {
              "description": "User registration details for the activity",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserActivityDetails"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request - Invalid activityID or userID",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_400"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_404"
                  },
                  "examples": {
                    "userNotFound": {
                      "value": {
                        "error": true,
                        "message": "User not found"
                      }
                    },
                    "activityNotFound": {
                      "value": {
                        "error": true,
                        "message": "Activity not found"
                      }
                    },
                    "notRegistered": {
                      "value": {
                        "error": true,
                        "message": "User not registered to given Activity"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error has occurred",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "Whoops! An internal server error has occurred"
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/activity/{activityID}/registry/addusers": {
        "post": {
          "tags": [
            "Activities"
          ],
          "summary": "Add a user to an activity",
          "parameters": [
            {
              "name": "activityID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              },
              "description": "The ID of the activity to which the users will be added"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserActivityAdd"
                },
                "examples": {
                  "validRequest": {
                    "summary": "Valid request example",
                    "value": {
                      "users": [
                        1,
                        2,
                        3
                      ]
                    }
                  },
                  "invalidUserArray": {
                    "summary": "Invalid array format",
                    "value": {
                      "users": "invalid_format"
                    }
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "User/s added to activity successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "boolean",
                        "example": false
                      },
                      "message": {
                        "type": "string",
                        "example": "User/s 1, 2, 3 added successfully to activity 123"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request - Invalid input",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_400"
                  },
                  "examples": {
                    "invalidUserArray": {
                      "value": {
                        "error": true,
                        "message": "Users must be sent as an array even if a single user is being added"
                      }
                    },
                    "invalidUserIDs": {
                      "value": {
                        "error": true,
                        "message": "Invalid user ID/s: 1234"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found - Activity not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_404"
                  },
                  "examples": {
                    "activityNotFound": {
                      "value": {
                        "error": true,
                        "message": "Activity not found"
                      }
                    }
                  }
                }
              }
            },
            "422": {
              "description": "Unprocessable Entity - Validation errors",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_422"
                  },
                  "examples": {
                    "nonExistentUsers": {
                      "value": {
                        "error": true,
                        "message": "Users with the following ID/s do not exist: 4, 5"
                      }
                    },
                    "alreadyAddedUsers": {
                      "value": {
                        "error": true,
                        "message": "Users with the following ID/s are already added to this activity: 1, 2"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error has occurred",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "Whoops! An internal server error has occurred"
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/activity/{activityID}/registry/removeusers": {
        "post": {
          "tags": [
            "Activities"
          ],
          "summary": "Remove users from an activity",
          "parameters": [
            {
              "name": "activityID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "users": {
                      "type": "array",
                      "items": {
                        "type": "integer"
                      },
                      "example": [
                        1,
                        2,
                        3
                      ]
                    }
                  },
                  "required": [
                    "users"
                  ]
                },
                "examples": {
                  "validRequest": {
                    "summary": "Valid request",
                    "value": {
                      "users": [
                        1,
                        2,
                        3
                      ]
                    }
                  },
                  "invalidUserArray": {
                    "summary": "Invalid array format",
                    "value": {
                      "users": "invalid_format"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Users removed from activity successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "boolean",
                        "example": false
                      },
                      "message": {
                        "type": "string",
                        "example": "User/s with ID's 1, 2, 3 removed successfully from activity 5"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found - Activity or users not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_404"
                  }
                }
              }
            },
            "422": {
              "description": "Unprocessable Entity - Users not registered to activity",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "boolean",
                        "example": true
                      },
                      "message": {
                        "type": "string",
                        "example": "Users with the following ID/s are not added to this activity: 4"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/activity/{activityID}/add/inspection": {
        "post": {
          "tags": [
            "AddToActivity"
          ],
          "summary": "Create a new inspection for a specific activity",
          "parameters": [
            {
              "name": "activityID",
              "in": "path",
              "required": true,
              "description": "ID of the activity",
              "schema": {
                "type": "integer"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InspectionCreate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Inspection created successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Inspection"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request - Invalid input or missing required fields",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_400"
                  },
                  "examples": {
                    "missingFields": {
                      "value": {
                        "error": true,
                        "message": "Request body incomplete, required fields are missing",
                        "missingFields": [
                          "inspector",
                          "inspection_type",
                          "location"
                        ]
                      }
                    },
                    "invalidInput": {
                      "value": {
                        "error": true,
                        "message": "Invalid input data",
                        "errors_Incurred": [
                          {
                            "field": "inspector",
                            "message": "Invalid 'inspector': must be a valid user ID."
                          },
                          {
                            "field": "inspection_type",
                            "message": "Invalid 'inspection_type': must be 'Building' or 'Weekly Construction'."
                          },
                          {
                            "field": "location",
                            "message": "Invalid 'location': must be a valid location ID."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found - Activity or related entity not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_404"
                  },
                  "examples": {
                    "activityNotFound": {
                      "value": {
                        "error": true,
                        "message": "Activity not found"
                      }
                    },
                    "inspectorNotFound": {
                      "value": {
                        "error": true,
                        "message": "Inspector not found or not registered to the activity"
                      }
                    },
                    "locationNotFound": {
                      "value": {
                        "error": true,
                        "message": "Location not found"
                      }
                    }
                  }
                }
              }
            },
            "422": {
              "description": "Unprocessable Entity - Validation errors occurred",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_422"
                  },
                  "examples": {
                    "validationErrors": {
                      "value": {
                        "error": true,
                        "message": "Invalid input data",
                        "errors_Incurred": [
                          {
                            "field": "inspector",
                            "message": "Inspector does not exist"
                          },
                          {
                            "field": "location",
                            "message": "Location ID does not exist"
                          },
                          {
                            "field": "inspection_start",
                            "message": "Inspection start time must be before the inspection end time"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "Whoops! An internal server error has occurred"
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/activity/{activityID}/add/riskassessment": {
        "post": {
          "tags": [
            "AddToActivity"
          ],
          "summary": "Add a risk assessment",
          "parameters": [
            {
              "name": "activityID",
              "in": "path",
              "required": true,
              "style": "simple",
              "explode": false,
              "schema": {
                "type": "integer"
              },
              "description": "ID of the activity to add the risk assessment to"
            }
          ],
          "requestBody": {
            "description": "Details of the risk assessment to be added",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiskAssessmentCreate"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Risk assessment created successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "Risk Assessment created with the following information"
                      },
                      "fields": {
                        "$ref": "#/components/schemas/RiskAssessment"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request - Invalid activityID or missing required fields",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_400"
                  },
                  "examples": {
                    "invalidActivityID": {
                      "summary": "Invalid activityID",
                      "value": {
                        "error": true,
                        "message": "Invalid activityID, must be an integer"
                      }
                    },
                    "missingFields": {
                      "summary": "Missing required fields",
                      "value": {
                        "error": true,
                        "message": "Risk Assessment cannot be created due to missing required fields",
                        "missingFields": [
                          "assessment_date",
                          "assessor",
                          "location"
                        ]
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found - Activity, Assessor, or Location not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_404"
                  },
                  "examples": {
                    "activityNotFound": {
                      "value": {
                        "error": true,
                        "message": "Activity not found"
                      }
                    },
                    "assessorNotFound": {
                      "value": {
                        "error": true,
                        "message": "Assessor does not exist"
                      }
                    },
                    "locationNotFound": {
                      "value": {
                        "error": true,
                        "message": "Location does not exist"
                      }
                    }
                  }
                }
              }
            },
            "422": {
              "description": "Unprocessable Entity - Validation errors",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_422"
                  },
                  "examples": {
                    "invalidInput": {
                      "summary": "Invalid input data",
                      "value": {
                        "error": true,
                        "message": "Invalid input data",
                        "errors_incurred": [
                          {
                            "field": "assessment_date",
                            "message": "Assessment date must be within the activity period."
                          },
                          {
                            "field": "assessor",
                            "message": "Assessor does not exist"
                          },
                          {
                            "field": "location",
                            "message": "Location does not exist"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "An internal server error occurred."
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/activity/{activityID}/add/meeting": {
        "post": {
          "tags": [
            "AddToActivity"
          ],
          "summary": "Create a meeting",
          "parameters": [
            {
              "name": "activityID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              },
              "description": "The ID of the activity to which the meeting will be added"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeetingCreate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Meeting created successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Meeting"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_400"
                  },
                  "examples": {
                    "missingFields": {
                      "value": {
                        "error": true,
                        "message": "Request body incomplete, required fields are missing",
                        "missingFields": [
                          "meeting_date",
                          "meeting_start",
                          "meeting_name"
                        ]
                      }
                    },
                    "invalidInput": {
                      "value": {
                        "error": true,
                        "message": "Invalid input data",
                        "errors_Incurred": [
                          {
                            "field": "meeting_start",
                            "message": "Meeting start time must be a valid time."
                          },
                          {
                            "field": "meeting_date",
                            "message": "Meeting date must be a valid date."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Activity not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_404"
                  },
                  "examples": {
                    "activityNotFound": {
                      "value": {
                        "error": true,
                        "message": "Activity not found"
                      }
                    }
                  }
                }
              }
            },
            "422": {
              "description": "Unprocessable Entity - Validation errors",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_422"
                  },
                  "examples": {
                    "validationErrors": {
                      "value": {
                        "error": true,
                        "message": "Invalid input data",
                        "errors_Incurred": [
                          {
                            "field": "meeting_date",
                            "message": "Meeting date must be within the activity period."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "An internal server error occurred."
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/inspection/search": {
        "get": {
          "tags": [
            "Inspections"
          ],
          "summary": "Get a list of all inspections",
          "parameters": [
            {
              "name": "activityID",
              "in": "query",
              "required": false,
              "style": "form",
              "explode": true,
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "inspector",
              "in": "query",
              "required": false,
              "style": "form",
              "explode": true,
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "inspection_type",
              "in": "query",
              "required": false,
              "style": "form",
              "explode": true,
              "schema": {
                "type": "string",
                "enum": [
                  "Building",
                  "Weekly Construction"
                ]
              }
            },
            {
              "name": "status",
              "in": "query",
              "required": false,
              "style": "form",
              "explode": true,
              "schema": {
                "type": "string",
                "enum": [
                  "Planned",
                  "On-Going",
                  "Complete"
                ]
              }
            },
            {
              "name": "limit",
              "in": "query",
              "required": false,
              "style": "form",
              "explode": true,
              "schema": {
                "type": "integer",
                "example": 10
              }
            },
            {
              "name": "offset",
              "in": "query",
              "required": false,
              "style": "form",
              "explode": true,
              "schema": {
                "type": "integer",
                "example": 0
              }
            }
          ],
          "responses": {
            "200": {
              "description": "List of inspections retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Inspection"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request - Invalid query parameters",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_400"
                  },
                  "examples": {
                    "invalidQueryParams": {
                      "value": {
                        "error": true,
                        "message": "Invalid query parameters"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found - No inspections found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_404"
                  },
                  "examples": {
                    "noInspectionsFound": {
                      "value": {
                        "error": true,
                        "message": "No inspections found matching the given criteria"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "An internal server error occurred"
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/inspection/{inspectionID}/details": {
        "get": {
          "tags": [
            "Inspections"
          ],
          "summary": "Get details of a specific inspection",
          "parameters": [
            {
              "name": "inspectionID",
              "in": "path",
              "required": true,
              "style": "simple",
              "explode": false,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Inspection details retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Inspection"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request - Invalid inspectionID",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_400"
                  },
                  "examples": {
                    "invalidInspectionID": {
                      "value": {
                        "error": true,
                        "message": "Invalid inspectionID"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found - Inspection not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_404"
                  },
                  "examples": {
                    "inspectionNotFound": {
                      "value": {
                        "error": true,
                        "message": "Inspection not found"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "An internal server error occurred"
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/inspection/{inspectionID}/update": {
        "put": {
          "tags": [
            "Inspections"
          ],
          "summary": "Update details of an inspection",
          "parameters": [
            {
              "name": "inspectionID",
              "in": "path",
              "required": true,
              "style": "simple",
              "explode": false,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InspectionUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Inspection updated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Inspection"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request - Invalid input or missing required fields",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_400"
                  },
                  "examples": {
                    "missingFields": {
                      "value": {
                        "error": true,
                        "message": "Request body incomplete, required fields are missing",
                        "missingFields": [
                          "inspector",
                          "inspection_type",
                          "location"
                        ]
                      }
                    },
                    "invalidInput": {
                      "value": {
                        "error": true,
                        "message": "Invalid input data",
                        "errors_Incurred": [
                          {
                            "field": "inspector",
                            "message": "Inspector does not exist"
                          },
                          {
                            "field": "location",
                            "message": "Location does not exist"
                          },
                          {
                            "field": "inspection_start",
                            "message": "Inspection start time must be before the inspection end time"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found - Inspection or related entities not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_404"
                  },
                  "examples": {
                    "inspectionNotFound": {
                      "value": {
                        "error": true,
                        "message": "Inspection not found"
                      }
                    },
                    "locationNotFound": {
                      "value": {
                        "error": true,
                        "message": "Location not found"
                      }
                    },
                    "activityNotFound": {
                      "value": {
                        "error": true,
                        "message": "Activity not found"
                      }
                    }
                  }
                }
              }
            },
            "422": {
              "description": "Unprocessable Entity - Validation errors occurred",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_422"
                  },
                  "examples": {
                    "validationErrors": {
                      "value": {
                        "error": true,
                        "message": "Invalid input data",
                        "errors_Incurred": [
                          {
                            "field": "inspector",
                            "message": "Inspector does not exist"
                          },
                          {
                            "field": "location",
                            "message": "Location does not exist"
                          },
                          {
                            "field": "inspection_start",
                            "message": "Inspection start time must be before the inspection end time"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "Whoops! An internal server error has occurred"
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/inspection/{inspectionID}/remove": {
        "delete": {
          "tags": [
            "Inspections"
          ],
          "summary": "Remove an inspection",
          "parameters": [
            {
              "name": "inspectionID",
              "in": "path",
              "required": true,
              "style": "simple",
              "explode": false,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Inspection removed successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SuccessResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request - Invalid inspectionID",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_400"
                  },
                  "examples": {
                    "invalidID": {
                      "value": {
                        "error": true,
                        "message": "Invalid inspectionID"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found - Inspection not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_404"
                  },
                  "examples": {
                    "inspectionNotFound": {
                      "value": {
                        "error": true,
                        "message": "Inspection not found"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "Whoops! An internal server error has occurred"
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/inspection/checklistresponse/{inspectionID}/create": {
        "post": {
          "tags": [
            "Inspections"
          ],
          "summary": "Create checklist responses for an inspection",
          "parameters": [
            {
              "name": "inspectionID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              },
              "description": "ID of the inspection for which to create checklist responses"
            }
          ],
          "requestBody": {
            "description": "Checklist responses to be added for the inspection",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InspectionCheckListResponseAdd"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Checklist responses created successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "Checklist responses created successfully."
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Invalid inspectionID",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "boolean",
                        "example": true
                      },
                      "message": {
                        "type": "string",
                        "example": "Invalid inspectionID, must be an integer"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Inspection or checklist items not found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "boolean",
                        "example": true
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  },
                  "examples": {
                    "inspectionNotFound": {
                      "value": {
                        "error": true,
                        "message": "Inspection not found"
                      }
                    },
                    "checklistNotFound": {
                      "value": {
                        "error": true,
                        "message": "No checklist items found for this inspection type."
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "boolean",
                        "example": true
                      },
                      "message": {
                        "type": "string",
                        "example": "Internal server error"
                      }
                    }
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/inspection/checklistresponse/{responseID}/update": {
        "put": {
          "tags": [
            "Inspections"
          ],
          "summary": "Update a specific checklist response",
          "parameters": [
            {
              "name": "responseID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              },
              "description": "ID of the checklist response to update"
            }
          ],
          "requestBody": {
            "description": "Fields to update for the checklist response",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InspectionCheckListResponseUpdate"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Checklist response updated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "Checklist response updated successfully for the following fields:"
                      },
                      "updatedFields": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "example": {
                    "message": "Checklist response updated successfully for the following fields:",
                    "updatedFields": [
                      "comments",
                      "compliance_level_achieved"
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Invalid responseID or no update data provided",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "boolean"
                      },
                      "message": {
                        "type": "string"
                      }
                    },
                    "example": {
                      "error": true,
                      "message": "Invalid responseID, must be an integer"
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Attempt to update non-editable fields",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "boolean"
                      },
                      "message": {
                        "type": "string"
                      },
                      "unchangeableFields": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "example": {
                    "error": true,
                    "message": "You are attempting to change fields you are not authorised to modify.",
                    "unchangeableFields": [
                      "responseID",
                      "checklistID",
                      "inspectionID"
                    ]
                  }
                }
              }
            },
            "404": {
              "description": "Checklist response not found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "boolean"
                      },
                      "message": {
                        "type": "string"
                      }
                    },
                    "example": {
                      "error": true,
                      "message": "Inspection Checklist response not found"
                    }
                  }
                }
              }
            },
            "422": {
              "description": "Validation errors in input data",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "boolean"
                      },
                      "message": {
                        "type": "string"
                      },
                      "errors_Incurred": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "field": {
                              "type": "string"
                            },
                            "message": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "example": {
                      "error": true,
                      "message": "Invalid input data",
                      "errors_Incurred": [
                        {
                          "field": "compliance_level_achieved",
                          "message": "Invalid value for 'compliance_level_achieved'"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "boolean"
                      },
                      "message": {
                        "type": "string"
                      }
                    },
                    "example": {
                      "error": true,
                      "message": "Internal server error"
                    }
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/checklistitem/search": {
        "get": {
          "tags": [
            "Checklist Items"
          ],
          "summary": "Get list of all checklist items",
          "parameters": [
            {
              "name": "prompt",
              "in": "query",
              "description": "Filter by prompt text (partial match)",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "prompt_item_type",
              "in": "query",
              "description": "Filter by prompt item type",
              "schema": {
                "type": "string",
                "enum": [
                  "MAIN BUILDING",
                  "AMENITIES",
                  "EMERGENCIES/INCIDENTS",
                  "CEILING & ROOF AREAS",
                  "LADDERS",
                  "ELECTRICAL",
                  "PLANT & EQUIPMENT",
                  "MOBILE PLANT",
                  "CRANES & HOISTS",
                  "MANUAL TASKS",
                  "MAIN ENVIRONMENT",
                  "NOISE",
                  "HAZARDOUS CHEMICALS",
                  "SILICA",
                  "OUTSIDE AREAS",
                  "BEHAVIOURAL",
                  "OTHER HAZARDS",
                  "SCAFFOLD/FORMWORK",
                  "PUBLIC PROTECTION",
                  "WELDING / HOT WORK",
                  "TRENCHES AND EXCAVATIONS",
                  "EDGE PROTECTION",
                  "FALL PROTECTION COVER",
                  "HARNESS SYSTEM",
                  "PERSONAL PROTECTIVE EQUIPMENT",
                  "EMERGENCY EQUIPMENT"
                ]
              }
            },
            {
              "name": "inspection_type",
              "in": "query",
              "description": "Filter by inspection type",
              "schema": {
                "type": "string",
                "enum": [
                  "Building",
                  "Weekly Construction",
                  "N/A"
                ]
              }
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Limit the number of returned results",
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Skip the first N results",
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ChecklistItem"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_404"
                  },
                  "examples": {
                    "noItemsFound": {
                      "value": {
                        "error": true,
                        "message": "No checklist items found"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "Database error occurred"
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/checklistitem/add": {
        "post": {
          "tags": [
            "Checklist Items"
          ],
          "summary": "Add a new checklist item",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistItemCreate"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Checklist item created successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "Checklist item created with the following information"
                      },
                      "fields": {
                        "$ref": "#/components/schemas/ChecklistItem"
                      }
                    }
                  },
                  "example": {
                    "message": "Checklist item created with the following information",
                    "fields": {
                      "checklistID": 1,
                      "prompt": "Are all fire exits clear?",
                      "prompt_item_type": "AMENITIES",
                      "inspection_type": "Building"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request - Missing required fields",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "boolean",
                        "example": true
                      },
                      "message": {
                        "type": "string",
                        "example": "Checklist item cannot be created due to missing required fields"
                      },
                      "missingFields": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "example": {
                      "error": true,
                      "message": "Checklist item cannot be created due to missing required fields",
                      "missingFields": [
                        "prompt_item_type"
                      ]
                    }
                  }
                }
              }
            },
            "409": {
              "description": "Conflict - Checklist item already exists",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "boolean",
                        "example": true
                      },
                      "message": {
                        "type": "string",
                        "example": "A checklist item with this combined prompt and prompt item type already exists."
                      }
                    }
                  }
                }
              }
            },
            "422": {
              "description": "Unprocessable Entity - Validation errors",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_422"
                  },
                  "examples": {
                    "invalidInput": {
                      "summary": "Invalid input data",
                      "value": {
                        "error": true,
                        "message": "Invalid input data",
                        "errors_Incurred": [
                          {
                            "field": "prompt",
                            "message": "Invalid 'prompt': must be a non-empty string."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "An internal server error occurred."
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/checklistitem/{checklistID}/details": {
        "get": {
          "tags": [
            "Checklist Items"
          ],
          "summary": "View a specific checklist item",
          "parameters": [
            {
              "name": "checklistID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              },
              "description": "The ID of the checklist item to retrieve"
            }
          ],
          "responses": {
            "200": {
              "description": "Checklist item details retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ChecklistItem"
                  },
                  "example": {
                    "checklistID": 1,
                    "prompt": "Are all safety signs visible?",
                    "prompt_item_type": "MAIN BUILDING",
                    "inspection_type": "Building"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid checklistID provided",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "boolean",
                        "example": true
                      },
                      "message": {
                        "type": "string",
                        "example": "Invalid checklistID"
                      }
                    }
                  },
                  "example": {
                    "error": true,
                    "message": "Invalid checklistID"
                  }
                }
              }
            },
            "404": {
              "description": "Checklist item not found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "boolean",
                        "example": true
                      },
                      "message": {
                        "type": "string",
                        "example": "Checklist item not found"
                      }
                    }
                  },
                  "example": {
                    "error": true,
                    "message": "Checklist item not found"
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "An internal server error occurred."
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/checklistitem/{checklistID}/update": {
        "put": {
          "tags": [
            "Checklist Items"
          ],
          "summary": "Update a checklist item",
          "parameters": [
            {
              "name": "checklistID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              },
              "description": "The ID of the checklist item to update"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistItemUpdate"
                },
                "examples": {
                  "validRequest": {
                    "summary": "Valid update request example",
                    "value": {
                      "prompt": "Are all fire extinguishers easily accessible and in working order?",
                      "prompt_item_type": "EMERGENCIES/INCIDENTS",
                      "inspection_type": "Building"
                    }
                  },
                  "emptyRequestBody": {
                    "summary": "No data provided",
                    "value": {}
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Checklist item updated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ChecklistItem"
                  },
                  "example": {
                    "checklistID": 1,
                    "prompt": "Are all fire extinguishers easily accessible and in working order?",
                    "prompt_item_type": "EMERGENCIES/INCIDENTS",
                    "inspection_type": "Building"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_400"
                  },
                  "examples": {
                    "invalidChecklistID": {
                      "value": {
                        "error": true,
                        "message": "Invalid checklistID"
                      }
                    },
                    "noUpdateData": {
                      "value": {
                        "error": true,
                        "message": "No update data provided for checklist item"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Checklist item not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_404"
                  },
                  "examples": {
                    "checklistItemNotFound": {
                      "value": {
                        "error": true,
                        "message": "Checklist item not found"
                      }
                    }
                  }
                }
              }
            },
            "422": {
              "description": "Unprocessable Entity - Validation errors",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_422"
                  },
                  "examples": {
                    "validationErrors": {
                      "value": {
                        "error": true,
                        "message": "Invalid input data",
                        "errors_Incurred": [
                          {
                            "field": "prompt",
                            "message": "Prompt cannot be empty"
                          },
                          {
                            "field": "prompt_item_type",
                            "message": "Prompt item type is invalid"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "Database error occurred"
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/checklistitem/{checklistID}/remove": {
        "delete": {
          "tags": [
            "Checklist Items"
          ],
          "summary": "Delete a checklist item",
          "parameters": [
            {
              "name": "checklistID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              },
              "description": "The ID of the checklist item to delete"
            }
          ],
          "responses": {
            "200": {
              "description": "Checklist item deleted successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "message": {
                        "type": "string",
                        "example": "Checklist item with ID 1 removed successfully."
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request - Invalid checklistID",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_400"
                  },
                  "examples": {
                    "invalidChecklistID": {
                      "value": {
                        "error": true,
                        "message": "Invalid checklistID"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found - Checklist item not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_404"
                  },
                  "examples": {
                    "checklistItemNotFound": {
                      "value": {
                        "error": true,
                        "message": "Checklist item not found"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "Database error occurred"
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/riskassessment/search": {
        "get": {
          "tags": [
            "Risk Assessment"
          ],
          "summary": "Get a list of all risk assessments",
          "parameters": [
            {
              "name": "assessment_date",
              "in": "query",
              "required": false,
              "style": "form",
              "explode": true,
              "schema": {
                "type": "string",
                "example": "01/01/2023",
                "description": "Filter by assessment date in format YYYY-MM-DD"
              }
            },
            {
              "name": "location",
              "in": "query",
              "required": false,
              "style": "form",
              "explode": true,
              "schema": {
                "type": "integer",
                "description": "Filter by location ID"
              }
            },
            {
              "name": "assessor",
              "in": "query",
              "required": false,
              "style": "form",
              "explode": true,
              "schema": {
                "type": "integer",
                "description": "Filter by assessor user ID"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "description": "Limit the number of results"
              }
            },
            {
              "name": "offset",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "description": "Skip the first N results"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "List of risk assessments retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/RiskAssessment"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "No risk assessments found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "boolean",
                        "example": true
                      },
                      "message": {
                        "type": "string",
                        "example": "No risk assessments found"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "An internal server error occurred."
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/riskassessment/{assessmentID}/details": {
        "get": {
          "tags": [
            "Risk Assessment"
          ],
          "summary": "Get details of a risk assessment",
          "parameters": [
            {
              "name": "assessmentID",
              "in": "path",
              "required": true,
              "style": "simple",
              "explode": false,
              "schema": {
                "type": "integer"
              },
              "description": "The ID of the risk assessment to retrieve"
            }
          ],
          "responses": {
            "200": {
              "description": "Risk assessment details retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RiskAssessment"
                  },
                  "example": {
                    "assessmentID": 1,
                    "activityID": 1,
                    "assessment_date": "15/01/2024",
                    "review_needed": "15/07/2024",
                    "assessor": 1,
                    "location": 1
                  }
                }
              }
            },
            "400": {
              "description": "Invalid assessmentID provided",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_400"
                  },
                  "example": {
                    "error": true,
                    "message": "Invalid assessmentID"
                  }
                }
              }
            },
            "404": {
              "description": "Risk assessment not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_404"
                  },
                  "example": {
                    "error": true,
                    "message": "Risk Assessment not found"
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "An internal server error occurred."
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/riskassessment/{assessmentID}/update": {
        "put": {
          "tags": [
            "Risk Assessment"
          ],
          "summary": "Update a specific risk assessment",
          "parameters": [
            {
              "name": "assessmentID",
              "in": "path",
              "required": true,
              "style": "simple",
              "explode": false,
              "schema": {
                "type": "integer"
              },
              "description": "The ID of the risk assessment to update"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiskAssessmentUpdate"
                },
                "examples": {
                  "validRequest": {
                    "summary": "Valid update request example",
                    "value": {
                      "assessment_date": "15/02/2024",
                      "review_needed": "15/08/2024",
                      "assessor": 3,
                      "location": 2
                    }
                  },
                  "emptyRequestBody": {
                    "summary": "No data provided",
                    "value": {}
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Risk assessment updated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RiskAssessment"
                  },
                  "example": {
                    "message": "Risk Assessment updated successfully for the following fields:",
                    "updatedFields": [
                      "assessment_date",
                      "review_needed",
                      "assessor",
                      "location"
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_400"
                  },
                  "examples": {
                    "invalidAssessmentID": {
                      "summary": "Invalid assessmentID provided",
                      "value": {
                        "error": true,
                        "message": "Invalid assessmentID, must be an integer"
                      }
                    },
                    "noUpdateData": {
                      "summary": "No update data provided",
                      "value": {
                        "error": true,
                        "message": "No update data provided for the risk assessment"
                      }
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_403"
                  },
                  "example": {
                    "error": true,
                    "message": "You are attempting to change fields you are not authorised to modify.",
                    "unchangeableFields": [
                      "assessmentID",
                      "activityID"
                    ]
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_404"
                  },
                  "examples": {
                    "riskAssessmentNotFound": {
                      "summary": "Risk assessment not found",
                      "value": {
                        "error": true,
                        "message": "Risk Assessment not found"
                      }
                    },
                    "assessorNotFound": {
                      "summary": "Assessor not found",
                      "value": {
                        "error": true,
                        "message": "Assessor does not exist"
                      }
                    },
                    "locationNotFound": {
                      "summary": "Location not found",
                      "value": {
                        "error": true,
                        "message": "Location does not exist"
                      }
                    }
                  }
                }
              }
            },
            "422": {
              "description": "Unprocessable Entity - Validation errors",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_422"
                  },
                  "example": {
                    "error": true,
                    "message": "Invalid input data",
                    "errors_incurred": [
                      {
                        "field": "assessor",
                        "message": "Assessor does not exist"
                      },
                      {
                        "field": "location",
                        "message": "Location does not exist"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "An internal server error occurred."
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/riskassessment/{assessmentID}/remove": {
        "delete": {
          "tags": [
            "Risk Assessment"
          ],
          "summary": "Remove a specific risk assessment",
          "parameters": [
            {
              "name": "assessmentID",
              "in": "path",
              "required": true,
              "style": "simple",
              "explode": false,
              "schema": {
                "type": "integer"
              },
              "description": "The ID of the risk assessment to remove"
            }
          ],
          "responses": {
            "200": {
              "description": "Risk assessment removed successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "message": {
                        "type": "string",
                        "example": "Risk Assessment with ID 1 removed successfully."
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "boolean",
                        "example": true
                      },
                      "message": {
                        "type": "string",
                        "example": "Invalid assessmentID"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_404"
                  },
                  "examples": {
                    "riskAssessmentNotFound": {
                      "value": {
                        "error": true,
                        "message": "Risk Assessment not found"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "An internal server error occurred."
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/riskassessment/hazard/search": {
        "get": {
          "tags": [
            "Risk Assessment"
          ],
          "summary": "Get list of all hazards for a risk assessment",
          "parameters": [
            {
              "name": "hazardID",
              "in": "query",
              "required": false,
              "style": "form",
              "explode": true,
              "schema": {
                "type": "integer"
              },
              "description": "Filter by hazard ID"
            },
            {
              "name": "assessmentID",
              "in": "query",
              "required": false,
              "style": "form",
              "explode": true,
              "schema": {
                "type": "integer"
              },
              "description": "Filter by risk assessment ID"
            },
            {
              "name": "label",
              "in": "query",
              "required": false,
              "style": "form",
              "explode": true,
              "schema": {
                "type": "string"
              },
              "description": "Filter by hazard label"
            },
            {
              "name": "specific_area",
              "in": "query",
              "required": false,
              "style": "form",
              "explode": true,
              "schema": {
                "type": "string"
              },
              "description": "Filter by specific area of the hazard"
            },
            {
              "name": "risk_level_before_controls",
              "in": "query",
              "required": false,
              "style": "form",
              "explode": true,
              "schema": {
                "type": "string",
                "enum": [
                  "Low",
                  "Medium",
                  "High",
                  "Emergency"
                ]
              },
              "description": "Filter by risk level before controls"
            },
            {
              "name": "risk_level_after_controls",
              "in": "query",
              "required": false,
              "style": "form",
              "explode": true,
              "schema": {
                "type": "string",
                "enum": [
                  "Low",
                  "Medium",
                  "High",
                  "Emergency"
                ]
              },
              "description": "Filter by risk level after controls"
            },
            {
              "name": "limit",
              "in": "query",
              "required": false,
              "style": "form",
              "explode": true,
              "schema": {
                "type": "integer"
              },
              "description": "Limit the number of results returned"
            },
            {
              "name": "offset",
              "in": "query",
              "required": false,
              "style": "form",
              "explode": true,
              "schema": {
                "type": "integer"
              },
              "description": "Offset the starting point of the result set"
            }
          ],
          "responses": {
            "200": {
              "description": "List of hazards retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Hazard"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "No hazards found matching the given criteria",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_404"
                  },
                  "examples": {
                    "noHazardsFound": {
                      "value": {
                        "error": true,
                        "message": "No hazards found matching the given criteria"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "An internal server error occurred."
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/riskassessment/hazard/add": {
        "post": {
          "tags": [
            "Risk Assessment"
          ],
          "summary": "Add a hazard for a risk assessment",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HazardCreate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Hazard created successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Hazard"
                  }
                }
              }
            },
            "400": {
              "description": "Missing required fields or invalid data",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_400"
                  },
                  "examples": {
                    "missingFields": {
                      "value": {
                        "error": true,
                        "message": "Missing required fields",
                        "missingFields": [
                          "label",
                          "specific_area"
                        ]
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Assessment not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_404"
                  },
                  "examples": {
                    "assessmentNotFound": {
                      "value": {
                        "error": true,
                        "message": "Assessment not found"
                      }
                    }
                  }
                }
              }
            },
            "422": {
              "description": "Invalid input data",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_422"
                  },
                  "examples": {
                    "invalidInput": {
                      "value": {
                        "error": true,
                        "message": "Invalid input data",
                        "errors_incurred": [
                          {
                            "field": "risk_level_before_controls",
                            "message": "Invalid 'risk_level_before_controls': must be one of 'Low', 'Medium', 'High', 'Emergency'."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "An internal server error occurred."
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/riskassessment/hazard/{hazardID}/update": {
        "put": {
          "tags": [
            "Risk Assessment"
          ],
          "summary": "Update a hazard for a risk assessment",
          "parameters": [
            {
              "name": "hazardID",
              "in": "path",
              "required": true,
              "style": "simple",
              "explode": false,
              "schema": {
                "type": "integer"
              },
              "description": "ID of the hazard to be updated"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HazardUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Hazard updated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "message": {
                        "type": "string",
                        "example": "Hazard updated successfully"
                      },
                      "updatedFields": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "example": [
                          "label",
                          "specific_area",
                          "risk_level_before_controls"
                        ]
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request - Invalid hazard ID or missing update data",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_400"
                  },
                  "examples": {
                    "missingUpdateData": {
                      "value": {
                        "error": true,
                        "message": "No update data provided"
                      }
                    },
                    "invalidHazardID": {
                      "value": {
                        "error": true,
                        "message": "Invalid hazardID, must be an integer"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Hazard not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_404"
                  },
                  "examples": {
                    "hazardNotFound": {
                      "value": {
                        "error": true,
                        "message": "Hazard not found"
                      }
                    }
                  }
                }
              }
            },
            "422": {
              "description": "Invalid input data",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_422"
                  },
                  "examples": {
                    "invalidInput": {
                      "value": {
                        "error": true,
                        "message": "Invalid input data",
                        "errors_incurred": [
                          {
                            "field": "risk_level_before_controls",
                            "message": "Invalid 'risk_level_before_controls': must be one of 'Low', 'Medium', 'High', 'Emergency'."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "An internal server error occurred."
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/riskassessment/hazard/{hazardID}/remove": {
        "delete": {
          "tags": [
            "Risk Assessment"
          ],
          "summary": "Remove a hazard for a risk assessment",
          "parameters": [
            {
              "name": "hazardID",
              "in": "path",
              "required": true,
              "style": "simple",
              "explode": false,
              "schema": {
                "type": "integer"
              },
              "description": "ID of the hazard to be removed"
            }
          ],
          "responses": {
            "200": {
              "description": "Hazard removed successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "message": {
                        "type": "string",
                        "example": "Hazard with ID 1 removed successfully."
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Invalid hazardID",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_400"
                  },
                  "examples": {
                    "invalidHazardID": {
                      "value": {
                        "error": true,
                        "message": "Invalid hazardID"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Hazard not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_404"
                  },
                  "examples": {
                    "hazardNotFound": {
                      "value": {
                        "error": true,
                        "message": "Hazard not found"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "An internal server error occurred."
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/meeting/{meetingID}/details": {
        "get": {
          "tags": [
            "Meetings"
          ],
          "summary": "Get details of a specific meeting",
          "parameters": [
            {
              "name": "meetingID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              },
              "description": "The ID of the meeting to retrieve"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Meeting"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request - Invalid meetingID",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_400"
                  },
                  "examples": {
                    "invalidMeetingID": {
                      "value": {
                        "error": true,
                        "message": "Invalid meetingID"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found - Meeting not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_404"
                  },
                  "examples": {
                    "meetingNotFound": {
                      "value": {
                        "error": true,
                        "message": "Meeting not found"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "Whoops! An internal server error has occurred"
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/meeting/{meetingID}/update": {
        "put": {
          "tags": [
            "Meetings"
          ],
          "summary": "Update an existing meeting",
          "parameters": [
            {
              "name": "meetingID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              },
              "description": "The ID of the meeting to update"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeetingUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Meeting updated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "Meeting updated successfully for the following fields:"
                      },
                      "updatedFields": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "example": [
                          "meeting_name",
                          "meeting_start",
                          "meeting_end"
                        ]
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_400"
                  },
                  "examples": {
                    "invalidMeetingID": {
                      "summary": "Invalid Meeting ID",
                      "value": {
                        "error": true,
                        "message": "Invalid meetingID, must be an integer"
                      }
                    },
                    "noUpdateData": {
                      "summary": "No update data provided",
                      "value": {
                        "error": true,
                        "message": "No update data provided for meetings"
                      }
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden - Unauthorized field changes",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "boolean"
                      },
                      "message": {
                        "type": "string"
                      },
                      "unchangeableFields": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "example": {
                      "error": true,
                      "message": "You are attempting to change fields you are not authorized to modify.",
                      "unchangeableFields": [
                        "activityID",
                        "meetingID"
                      ]
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found - Meeting not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_404"
                  },
                  "examples": {
                    "meetingNotFound": {
                      "value": {
                        "error": true,
                        "message": "Meeting not found"
                      }
                    }
                  }
                }
              }
            },
            "422": {
              "description": "Unprocessable Entity - Validation errors",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_422"
                  },
                  "examples": {
                    "validationErrors": {
                      "value": {
                        "error": true,
                        "message": "Invalid input data",
                        "errors_Incurred": [
                          {
                            "field": "meeting_start",
                            "message": "Meeting start time must be before the meeting end time"
                          },
                          {
                            "field": "meeting_date",
                            "message": "Meeting date must be within the activity period from YYYY-MM-DD to YYYY-MM-DD"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "Whoops! An internal server error has occurred"
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/meeting/{meetingID}/remove": {
        "delete": {
          "tags": [
            "Meetings"
          ],
          "summary": "Remove an existing meeting",
          "parameters": [
            {
              "name": "meetingID",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              },
              "description": "The ID of the meeting to remove"
            }
          ],
          "responses": {
            "200": {
              "description": "Meeting removed successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "message": {
                        "type": "string",
                        "example": "Meeting with ID 1 removed successfully."
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Invalid meeting ID",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_400"
                  },
                  "examples": {
                    "invalidMeetingID": {
                      "summary": "Invalid Meeting ID",
                      "value": {
                        "error": true,
                        "message": "Invalid meetingID"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Meeting not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_404"
                  },
                  "examples": {
                    "meetingNotFound": {
                      "value": {
                        "error": true,
                        "message": "Meeting not found"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "Whoops! An internal server error has occurred"
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/meeting/member/occupants": {
        "post": {
          "tags": [
            "Meetings"
          ],
          "summary": "Get all occupants for a meeting",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "meetingID": {
                      "type": "integer",
                      "description": "ID of the meeting",
                      "example": 1
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "List of occupants",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "users": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "userID": {
                              "type": "integer",
                              "example": 2
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "204": {
              "description": "No occupants found for the given meeting"
            },
            "400": {
              "description": "Invalid meetingID",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_400"
                  }
                }
              }
            },
            "404": {
              "description": "Meeting not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_404_1"
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_404_1"
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/meeting/member/addusers": {
        "post": {
          "tags": [
            "Meetings"
          ],
          "summary": "Add participants to a meeting",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeetingParticipantAdd"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "User(s) added successfully to the meeting",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "boolean",
                        "example": false
                      },
                      "message": {
                        "type": "string",
                        "example": "User/s 1, 2 added successfully to meeting 1"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request - Invalid meetingID or user data",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "boolean",
                        "example": true
                      },
                      "message": {
                        "type": "string",
                        "example": "Invalid meetingID or users must be sent as a non-empty array"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Meeting not found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "boolean",
                        "example": true
                      },
                      "message": {
                        "type": "string",
                        "example": "Meeting not found"
                      }
                    }
                  }
                }
              }
            },
            "422": {
              "description": "Unprocessable Entity - User(s) do not exist or already added",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "boolean",
                        "example": true
                      },
                      "message": {
                        "type": "string",
                        "example": "Users with the following ID/s do not exist: 5, 6"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "boolean",
                        "example": true
                      },
                      "message": {
                        "type": "string",
                        "example": "Internal server error occurred"
                      }
                    }
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/meeting/member/removeusers": {
        "post": {
          "tags": [
            "Meetings"
          ],
          "summary": "Remove participant/s from a meeting",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "meetingID": {
                      "type": "integer",
                      "example": 1
                    },
                    "users": {
                      "type": "array",
                      "items": {
                        "type": "integer"
                      },
                      "example": [
                        2,
                        3,
                        4
                      ]
                    }
                  },
                  "required": [
                    "meetingID",
                    "users"
                  ]
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Participants successfully removed from the meeting",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "boolean",
                        "example": false
                      },
                      "message": {
                        "type": "string",
                        "example": "User/s with ID's 1, 2 removed successfully from meeting 1."
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request - Invalid meetingID or user list",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "boolean",
                        "example": true
                      },
                      "message": {
                        "type": "string",
                        "example": "Invalid meetingID or Users must be sent as a non-empty array"
                      }
                    }
                  },
                  "examples": {
                    "invalidMeetingID": {
                      "summary": "Invalid meetingID",
                      "value": {
                        "error": true,
                        "message": "Invalid meetingID"
                      }
                    },
                    "invalidUserArray": {
                      "summary": "Invalid user array",
                      "value": {
                        "error": true,
                        "message": "Users must be sent as a non-empty array"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Meeting not found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "boolean",
                        "example": true
                      },
                      "message": {
                        "type": "string",
                        "example": "Meeting not found"
                      }
                    }
                  },
                  "examples": {
                    "meetingNotFound": {
                      "summary": "Meeting not found",
                      "value": {
                        "error": true,
                        "message": "Meeting not found"
                      }
                    }
                  }
                }
              }
            },
            "422": {
              "description": "Unprocessable Entity - User not part of the meeting",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "boolean",
                        "example": true
                      },
                      "message": {
                        "type": "string",
                        "example": "Users with the following ID/s are not part of this meeting: 3"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "boolean",
                        "example": true
                      },
                      "message": {
                        "type": "string",
                        "example": "Internal Server Error: Something went wrong"
                      }
                    }
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/meeting/topic/add": {
        "post": {
          "tags": [
            "Meetings"
          ],
          "summary": "Add a new topic to a meeting",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeetingTopicCreate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Meeting topic added successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "message": {
                        "type": "string",
                        "example": "Topic added successfully with topicID 12"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Missing required fields",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "boolean",
                        "example": true
                      },
                      "message": {
                        "type": "string",
                        "example": "Missing required fields: meetingID, subject_item, description_of_discussion"
                      },
                      "missingFields": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "example": [
                          "meetingID",
                          "subject_item",
                          "description_of_discussion"
                        ]
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Meeting not found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "boolean",
                        "example": true
                      },
                      "message": {
                        "type": "string",
                        "example": "Meeting not found"
                      }
                    }
                  }
                }
              }
            },
            "422": {
              "description": "Invalid input data",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "boolean",
                        "example": true
                      },
                      "message": {
                        "type": "string",
                        "example": "Invalid input data"
                      },
                      "errors_Incurred": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "field": {
                              "type": "string"
                            },
                            "message": {
                              "type": "string"
                            }
                          }
                        },
                        "example": [
                          {
                            "field": "subject_item",
                            "message": "Invalid 'subject_item': must be one of Hazards in general, Safety in Design, Training, Access and Egress, Housekeeping, Safety Behaviours, Incidents, Issues arising from reports, Notices from Authorities or internal, Other."
                          },
                          {
                            "field": "description_of_discussion",
                            "message": "Invalid 'description_of_discussion': must be a non-empty string and less than 400 characters."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/meeting/topic/{topicID}/update": {
        "put": {
          "tags": [
            "Meetings"
          ],
          "summary": "Update a specific topic in a meeting",
          "description": "Updates the details of a specific topic in a meeting, including subject item, description of discussion, and whether the topic has been discussed.",
          "parameters": [
            {
              "name": "topicID",
              "in": "path",
              "required": true,
              "description": "The ID of the topic to update",
              "schema": {
                "type": "integer",
                "example": 1
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeetingTopicUpdate"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Topic updated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "message": {
                        "type": "string",
                        "example": "Topic updated successfully"
                      },
                      "updatedFields": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "example": [
                          "subject_item",
                          "description_of_discussion",
                          "subject_discussed"
                        ]
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Invalid input or no update data provided",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_400"
                  },
                  "examples": {
                    "invalidID": {
                      "summary": "Invalid topic ID",
                      "value": {
                        "error": true,
                        "message": "Invalid topicID, must be an integer"
                      }
                    },
                    "noData": {
                      "summary": "No update data provided",
                      "value": {
                        "error": true,
                        "message": "No update data provided for the topic"
                      }
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Unauthorized field modification attempt",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_403"
                  },
                  "examples": {
                    "unchangeableFields": {
                      "summary": "Attempted to modify unchangeable fields",
                      "value": {
                        "error": true,
                        "message": "You are attempting to change fields that cannot be modified.",
                        "unchangeableFields": [
                          "topicID",
                          "meetingID"
                        ]
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Topic or Meeting not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_404"
                  },
                  "examples": {
                    "topicNotFound": {
                      "summary": "Topic not found",
                      "value": {
                        "error": true,
                        "message": "Topic not found"
                      }
                    },
                    "meetingNotFound": {
                      "summary": "Meeting not found",
                      "value": {
                        "error": true,
                        "message": "Meeting not found"
                      }
                    }
                  }
                }
              }
            },
            "422": {
              "description": "Invalid input data",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_422"
                  },
                  "examples": {
                    "invalidData": {
                      "summary": "Invalid input data",
                      "value": {
                        "error": true,
                        "message": "Invalid input data",
                        "errors_incurred": [
                          {
                            "field": "subject_item",
                            "message": "Invalid 'subject_item': must be one of 'Hazards in general', 'Safety in Design', 'Training', 'Access and Egress', 'Housekeeping', 'Safety Behaviours', 'Incidents', 'Issues arising from reports', 'Notices from Authorities or internal', 'Other'."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "examples": {
                    "internalError": {
                      "summary": "Internal server error",
                      "value": {
                        "error": true,
                        "message": "Internal Server Error: example error message"
                      }
                    }
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/meeting/topic/{topicID}/remove": {
        "delete": {
          "tags": [
            "Meetings"
          ],
          "summary": "Remove a specific topic from a meeting",
          "description": "Deletes a specific topic from the meeting based on the provided topicID.",
          "parameters": [
            {
              "name": "topicID",
              "in": "path",
              "required": true,
              "description": "The ID of the topic to be removed",
              "schema": {
                "type": "integer",
                "example": 1
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Topic removed successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "message": {
                        "type": "string",
                        "example": "Topic with ID 1 removed successfully."
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Invalid topicID",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_400"
                  },
                  "examples": {
                    "invalidID": {
                      "summary": "Invalid topicID",
                      "value": {
                        "error": true,
                        "message": "Invalid topicID"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Topic not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_404"
                  },
                  "examples": {
                    "topicNotFound": {
                      "summary": "Topic not found",
                      "value": {
                        "error": true,
                        "message": "Topic not found"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "examples": {
                    "internalError": {
                      "summary": "Internal server error",
                      "value": {
                        "error": true,
                        "message": "Internal Server Error: example error message"
                      }
                    }
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/actionregister/search": {
        "get": {
          "tags": [
            "Action Register"
          ],
          "summary": "Search for actions in the Action Register",
          "parameters": [
            {
              "name": "actionID",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer"
              },
              "description": "Filter by action ID"
            },
            {
              "name": "priority_level",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string",
                "enum": [
                  "Low",
                  "Medium",
                  "High",
                  "Critical"
                ]
              },
              "description": "Filter by priority level"
            },
            {
              "name": "current_status",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string",
                "enum": [
                  "Pending",
                  "Enrolled",
                  "In Progress",
                  "Closed"
                ]
              },
              "description": "Filter by current status"
            },
            {
              "name": "date_opened",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string",
                "format": "date"
              },
              "description": "Filter by date the action was opened"
            },
            {
              "name": "date_closed",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string",
                "format": "date"
              },
              "description": "Filter by date the action was closed"
            },
            {
              "name": "element_type",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string"
              },
              "description": "Filter by type of element (e.g., Project, Task, etc.)"
            },
            {
              "name": "person_responsible_for_resolve",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer"
              },
              "description": "Filter by the person responsible for resolving the action"
            },
            {
              "name": "limit",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer"
              },
              "description": "Limit the number of results"
            },
            {
              "name": "offset",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer"
              },
              "description": "Offset the results"
            }
          ],
          "responses": {
            "200": {
              "description": "List of actions retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Action"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "No actions found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "boolean"
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  },
                  "example": {
                    "error": true,
                    "message": "No actions found matching the given criteria"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "boolean"
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  },
                  "example": {
                    "error": true,
                    "message": "Internal server error"
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/actionregister/{actionID}/details": {
        "get": {
          "tags": [
            "Action Register"
          ],
          "summary": "View details of a specific action",
          "parameters": [
            {
              "name": "actionID",
              "in": "path",
              "required": true,
              "style": "simple",
              "explode": false,
              "schema": {
                "type": "integer"
              },
              "description": "ID of the action to retrieve"
            }
          ],
          "responses": {
            "200": {
              "description": "Action details retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Action"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid actionID",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "boolean"
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  },
                  "example": {
                    "error": true,
                    "message": "Invalid actionID"
                  }
                }
              }
            },
            "404": {
              "description": "Action not found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "boolean"
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  },
                  "example": {
                    "error": true,
                    "message": "Action not found"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "boolean"
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  },
                  "example": {
                    "error": true,
                    "message": "Internal server error"
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/actionregister/add": {
        "post": {
          "tags": [
            "Action Register"
          ],
          "summary": "Add a new action to the action register",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActionCreate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "201": {
              "description": "Action added successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "Action created with the following information"
                      },
                      "fields": {
                        "$ref": "#/components/schemas/Action"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request - Missing required fields",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "boolean",
                        "example": true
                      },
                      "message": {
                        "type": "string",
                        "example": "Action cannot be created due to missing required fields"
                      },
                      "missingFields": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "example": {
                    "error": true,
                    "message": "Action cannot be created due to missing required fields",
                    "missingFields": [
                      "actions_required",
                      "priority_level",
                      "element_type",
                      "elementID",
                      "person_responsible_for_resolve"
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden - Attempting to modify non-editable fields",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "boolean",
                        "example": true
                      },
                      "message": {
                        "type": "string",
                        "example": "You are attempting to set fields you are not authorised to set."
                      },
                      "unchangeableFields": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "example": {
                    "error": true,
                    "message": "You are attempting to set fields you are not authorised to set.",
                    "unchangeableFields": [
                      "actionID",
                      "current_status",
                      "date_opened",
                      "date_closed"
                    ]
                  }
                }
              }
            },
            "422": {
              "description": "Unprocessable Entity - Invalid input data",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "boolean",
                        "example": true
                      },
                      "message": {
                        "type": "string",
                        "example": "Invalid input data"
                      },
                      "errors_Incurred": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "field": {
                              "type": "string"
                            },
                            "message": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "example": {
                    "error": true,
                    "message": "Invalid input data",
                    "errors_Incurred": [
                      {
                        "field": "person_responsible_for_resolve",
                        "message": "User assigned issue does not exist"
                      },
                      {
                        "field": "element_type",
                        "message": "Cannot make action for non-existent element - ResponseID does not exist in Inspection Checklist Response Table"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "boolean"
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  },
                  "example": {
                    "error": true,
                    "message": "Internal server error"
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/actionregister/{actionID}/update": {
        "put": {
          "tags": [
            "Action Register"
          ],
          "summary": "Update details of an action",
          "parameters": [
            {
              "name": "actionID",
              "in": "path",
              "required": true,
              "style": "simple",
              "explode": false,
              "schema": {
                "type": "integer"
              },
              "description": "ID of the action to update"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActionUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Action updated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "Action updated successfully for the following fields:"
                      },
                      "updatedFields": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "example": {
                    "message": "Action updated successfully for the following fields:",
                    "updatedFields": [
                      "actions_required",
                      "priority_level",
                      "current_status",
                      "person_responsible_for_resolve"
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "boolean"
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  },
                  "example": {
                    "error": true,
                    "message": "Invalid actionID, must be an integer"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden - Attempting to modify non-editable fields",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "boolean"
                      },
                      "message": {
                        "type": "string"
                      },
                      "unchangeableFields": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "example": {
                    "error": true,
                    "message": "You are attempting to change fields you are not authorised to modify.",
                    "unchangeableFields": [
                      "actionID",
                      "date_opened",
                      "element_type",
                      "elementID",
                      "date_closed"
                    ]
                  }
                }
              }
            },
            "404": {
              "description": "Not Found - Action or related resources not found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "boolean"
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  },
                  "examples": {
                    "actionNotFound": {
                      "value": {
                        "error": true,
                        "message": "Action not found"
                      }
                    },
                    "userNotFound": {
                      "value": {
                        "error": true,
                        "message": "Person responsible for resolution does not exist"
                      }
                    }
                  }
                }
              }
            },
            "422": {
              "description": "Unprocessable Entity - Validation errors",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "boolean"
                      },
                      "message": {
                        "type": "string"
                      },
                      "errors_Incurred": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "field": {
                              "type": "string"
                            },
                            "message": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "example": {
                    "error": true,
                    "message": "Invalid input data",
                    "errors_Incurred": [
                      {
                        "field": "person_responsible_for_resolve",
                        "message": "Person responsible for resolution does not exist"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "boolean"
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  },
                  "example": {
                    "error": true,
                    "message": "Internal server error"
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/actionregister/internal/add": {
        "post": {
          "tags": [
            "Action Register"
          ],
          "summary": "Automatically add actions to the Action Register for non-compliant or overdue inspection checklist responses",
          "responses": {
            "200": {
              "description": "No new actions created",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "No new actions were created, as all responses are already handled."
                      }
                    }
                  }
                }
              }
            },
            "201": {
              "description": "Actions created successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "5 actions created in the Action Register."
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "No non-compliant or overdue checklist responses found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "No incomplete, non-compliant, or overdue checklist responses found."
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "An internal server error occurred."
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/report/inspection/{inspectionID}": {
        "get": {
          "tags": [
            "Reports"
          ],
          "summary": "Get an Inspection Report",
          "parameters": [
            {
              "name": "inspectionID",
              "in": "path",
              "required": true,
              "style": "simple",
              "explode": false,
              "schema": {
                "type": "integer"
              },
              "description": "ID of the inspection to retrieve"
            }
          ],
          "responses": {
            "200": {
              "description": "Inspection report retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "inspection": {
                        "type": "object",
                        "properties": {
                          "inspectionID": {
                            "type": "integer",
                            "example": 1
                          },
                          "inspection_date": {
                            "type": "string",
                            "example": "01/02/2024"
                          },
                          "inspection_start": {
                            "type": "string",
                            "example": "09:00"
                          },
                          "inspection_end": {
                            "type": "string",
                            "example": "10:30"
                          },
                          "inspector": {
                            "type": "object",
                            "properties": {
                              "userID": {
                                "type": "integer",
                                "example": 2
                              },
                              "fullName": {
                                "type": "string",
                                "example": "John Doe"
                              },
                              "job_title": {
                                "type": "string",
                                "example": "Safety Officer"
                              }
                            }
                          },
                          "location": {
                            "type": "object",
                            "properties": {
                              "locationID": {
                                "type": "integer",
                                "example": 3
                              },
                              "name": {
                                "type": "string",
                                "example": "Main Building"
                              },
                              "address": {
                                "type": "string",
                                "example": "123 Main St"
                              },
                              "city": {
                                "type": "string",
                                "example": "Melbourne"
                              },
                              "state": {
                                "type": "string",
                                "example": "VIC"
                              },
                              "post_code": {
                                "type": "string",
                                "example": "3000"
                              }
                            }
                          },
                          "inspection_type": {
                            "type": "string",
                            "example": "Building"
                          },
                          "general_notes": {
                            "type": "string",
                            "example": "Inspection of the main building."
                          },
                          "status": {
                            "type": "string",
                            "example": "Complete"
                          },
                          "checklist": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "checklistID": {
                                  "type": "integer",
                                  "example": 1
                                },
                                "prompt": {
                                  "type": "string",
                                  "example": "Are all safety signs clearly visible?"
                                },
                                "prompt_item_type": {
                                  "type": "string",
                                  "example": "MAIN BUILDING"
                                },
                                "response": {
                                  "type": "object",
                                  "properties": {
                                    "responseID": {
                                      "type": "integer",
                                      "example": 101
                                    },
                                    "comments": {
                                      "type": "string",
                                      "example": "All signs are visible and in good condition."
                                    },
                                    "compliance_level_achieved": {
                                      "type": "string",
                                      "example": "Compliant"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "actions": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "actionID": {
                                  "type": "integer",
                                  "example": 201
                                },
                                "actions_required": {
                                  "type": "string",
                                  "example": "Fix fire exit signs."
                                },
                                "action_status": {
                                  "type": "string",
                                  "example": "Open"
                                },
                                "date_opened": {
                                  "type": "string",
                                  "example": "01/02/2024"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Inspection not found or no related data available",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_404"
                  },
                  "examples": {
                    "inspectionNotFound": {
                      "value": {
                        "error": true,
                        "message": "Inspection not found or no related data available."
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "An internal server error occurred."
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/report/riskassessment/{assessmentID}": {
        "get": {
          "tags": [
            "Reports"
          ],
          "summary": "Get Hazard Report for a Risk Assessment",
          "parameters": [
            {
              "name": "assessmentID",
              "in": "path",
              "required": true,
              "style": "simple",
              "explode": false,
              "schema": {
                "type": "integer"
              },
              "description": "ID of the risk assessment to retrieve"
            }
          ],
          "responses": {
            "200": {
              "description": "Hazard report retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "riskAssessment": {
                        "type": "object",
                        "properties": {
                          "assessmentID": {
                            "type": "integer",
                            "example": 1
                          },
                          "assessment_date": {
                            "type": "string",
                            "example": "01/02/2024"
                          },
                          "assessor": {
                            "type": "object",
                            "properties": {
                              "userID": {
                                "type": "integer",
                                "example": 2
                              },
                              "fullName": {
                                "type": "string",
                                "example": "Jane Doe"
                              },
                              "job_title": {
                                "type": "string",
                                "example": "Risk Assessor"
                              }
                            }
                          },
                          "location": {
                            "type": "object",
                            "properties": {
                              "locationID": {
                                "type": "integer",
                                "example": 3
                              },
                              "name": {
                                "type": "string",
                                "example": "Construction Site A"
                              },
                              "address": {
                                "type": "string",
                                "example": "456 Example St"
                              },
                              "city": {
                                "type": "string",
                                "example": "Brisbane"
                              },
                              "state": {
                                "type": "string",
                                "example": "QLD"
                              },
                              "post_code": {
                                "type": "string",
                                "example": "4000"
                              }
                            }
                          },
                          "activity": {
                            "type": "object",
                            "properties": {
                              "activityID": {
                                "type": "integer",
                                "example": 4
                              },
                              "activity_name": {
                                "type": "string",
                                "example": "Building Inspection"
                              }
                            }
                          },
                          "project": {
                            "type": "object",
                            "properties": {
                              "projectID": {
                                "type": "integer",
                                "example": 5
                              },
                              "project_name": {
                                "type": "string",
                                "example": "High-rise Construction"
                              }
                            }
                          },
                          "hazards": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "hazardID": {
                                  "type": "integer",
                                  "example": 10
                                },
                                "label": {
                                  "type": "string",
                                  "example": "Fall Risk"
                                },
                                "specific_area": {
                                  "type": "string",
                                  "example": "Roof Access"
                                },
                                "description": {
                                  "type": "string",
                                  "example": "Risk of falling from the roof access area."
                                },
                                "recommended_controls": {
                                  "type": "string",
                                  "example": "Install guardrails and safety nets."
                                },
                                "risk_level_before_controls": {
                                  "type": "string",
                                  "example": "High"
                                },
                                "risk_level_after_controls": {
                                  "type": "string",
                                  "example": "Low"
                                }
                              }
                            }
                          },
                          "actions": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "actionID": {
                                  "type": "integer",
                                  "example": 15
                                },
                                "actions_required": {
                                  "type": "string",
                                  "example": "Implement guardrails immediately."
                                },
                                "action_status": {
                                  "type": "string",
                                  "example": "Open"
                                },
                                "date_opened": {
                                  "type": "string",
                                  "example": "02/02/2024"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Risk assessment not found or no related data available",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_404"
                  },
                  "examples": {
                    "assessmentNotFound": {
                      "value": {
                        "error": true,
                        "message": "Risk assessment not found or no related data available."
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "An internal server error occurred."
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      },
      "/report/toolboxtalkform/{meetingID}": {
        "get": {
          "tags": [
            "Reports"
          ],
          "summary": "Get Toolbox Talk Form",
          "parameters": [
            {
              "name": "meetingID",
              "in": "path",
              "required": true,
              "style": "simple",
              "explode": false,
              "schema": {
                "type": "integer"
              },
              "description": "The ID of the meeting to retrieve the toolbox talk form for."
            }
          ],
          "responses": {
            "200": {
              "description": "Toolbox talk form retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "meeting": {
                        "type": "object",
                        "properties": {
                          "meetingID": {
                            "type": "integer",
                            "example": 1
                          },
                          "meeting_date": {
                            "type": "string",
                            "example": "01/02/2024"
                          },
                          "meeting_start": {
                            "type": "string",
                            "example": "10:00"
                          },
                          "meeting_end": {
                            "type": "string",
                            "example": "11:00"
                          },
                          "meeting_name": {
                            "type": "string",
                            "example": "Weekly Safety Talk"
                          },
                          "meeting_notes": {
                            "type": "string",
                            "example": "Discussed site safety improvements."
                          },
                          "project": {
                            "type": "object",
                            "properties": {
                              "projectID": {
                                "type": "integer",
                                "example": 3
                              },
                              "project_name": {
                                "type": "string",
                                "example": "Construction Site A"
                              }
                            }
                          },
                          "activity": {
                            "type": "object",
                            "properties": {
                              "activityID": {
                                "type": "integer",
                                "example": 5
                              },
                              "activity_name": {
                                "type": "string",
                                "example": "Building Inspection"
                              }
                            }
                          }
                        }
                      },
                      "occupants": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "userID": {
                              "type": "integer",
                              "example": 10
                            },
                            "fullName": {
                              "type": "string",
                              "example": "John Doe"
                            },
                            "attendance_status": {
                              "type": "boolean",
                              "example": true
                            },
                            "job_title": {
                              "type": "string",
                              "example": "Supervisor"
                            },
                            "employment_status": {
                              "type": "string",
                              "example": "Full Time"
                            }
                          }
                        }
                      },
                      "topics": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "subject_item": {
                              "type": "string",
                              "example": "Safety in Design"
                            },
                            "description_of_discussion": {
                              "type": "string",
                              "example": "Discussed safe design principles for scaffolding."
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Meeting not found or no related data available",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_404"
                  },
                  "examples": {
                    "meetingNotFound": {
                      "value": {
                        "error": true,
                        "message": "Meeting not found or no related data available."
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InternalServerError"
                  },
                  "example": {
                    "error": true,
                    "message": "An internal server error occurred."
                  }
                }
              }
            }
          },
          "security": [
            {
              "BearerAuth": []
            }
          ]
        }
      }
    },
    "components": {
      "schemas": {
        "UserRegister": {
          "required": [
            "access_level",
            "email",
            "employment_status",
            "employment_type",
            "external_user",
            "first_name",
            "job_title",
            "last_name",
            "mobile_number",
            "password"
          ],
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "format": "email",
              "example": "john.doe@example.com"
            },
            "password": {
              "type": "string",
              "format": "password",
              "example": "Password1!"
            },
            "first_name": {
              "type": "string",
              "example": "John"
            },
            "last_name": {
              "type": "string",
              "example": "Doe"
            },
            "access_level": {
              "type": "string",
              "example": "TOP",
              "enum": [
                "TOP",
                "MIDDLE",
                "LOW"
              ]
            },
            "employment_status": {
              "type": "string",
              "example": "Full Time",
              "enum": [
                "Self Employed",
                "Full Time",
                "Casual",
                "Volunteer",
                "Shift Work",
                "Part Time"
              ]
            },
            "job_title": {
              "type": "string",
              "example": "Manager",
              "enum": [
                "Worker",
                "Supervisor",
                "Manager",
                "Senior Manager",
                "Contractor",
                "Supplier",
                "Visitor"
              ]
            },
            "employment_type": {
              "type": "string",
              "example": "Professional",
              "enum": [
                "Administration",
                "Technical",
                "Tradesperson",
                "Apprentice/Trainee",
                "Student",
                "Professional"
              ]
            },
            "external_user": {
              "type": "boolean",
              "example": false
            },
            "mobile_number": {
              "type": "string",
              "example": "0412345678"
            },
            "phone_number": {
              "type": "string",
              "example": "0212349678"
            },
            "DOB": {
              "type": "string",
              "example": "01/01/2023"
            },
            "next_of_kin": {
              "type": "string",
              "example": "Jane Doe"
            },
            "next_of_kin_contact": {
              "type": "string",
              "example": "0212349678"
            }
          }
        },
        "UserLogin": {
          "required": [
            "password"
          ],
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "format": "email",
              "example": "john.doe@example.com"
            },
            "mobile_number": {
              "type": "string",
              "example": "0412345678"
            },
            "password": {
              "type": "string",
              "format": "password",
              "example": "Password1!"
            }
          }
        },
        "RefreshTokenRequest": {
          "required": [
            "pin"
          ],
          "type": "object",
          "properties": {
            "pin": {
              "pattern": "^\\\\d{6}$",
              "type": "string",
              "example": "123456"
            }
          }
        },
        "UpdatePassword": {
          "required": [
            "currentPassword",
            "newPasswordOne",
            "newPasswordTwo"
          ],
          "type": "object",
          "properties": {
            "currentPassword": {
              "type": "string",
              "format": "password",
              "example": "Password1!"
            },
            "newPasswordOne": {
              "type": "string",
              "format": "password",
              "example": "newSecurePassword456!"
            },
            "newPasswordTwo": {
              "type": "string",
              "format": "password",
              "example": "newSecurePassword456!"
            }
          }
        },
        "UpdatePin": {
          "required": [
            "currentPassword",
            "pin"
          ],
          "type": "object",
          "properties": {
            "currentPassword": {
              "type": "string",
              "format": "password",
              "example": "newSecurePassword456!"
            },
            "pin": {
              "pattern": "^\\\\d{6}$",
              "type": "string",
              "example": "123456"
            }
          }
        },
        "UpdateUser": {
          "type": "object",
          "properties": {
            "first_name": {
              "type": "string",
              "example": "John"
            },
            "last_name": {
              "type": "string",
              "example": "Doe"
            },
            "email": {
              "type": "string",
              "format": "email",
              "example": "john.doe@example.com"
            },
            "mobile_number": {
              "type": "string",
              "example": "0412345678"
            },
            "phone_number": {
              "type": "string",
              "example": "0212349678"
            },
            "access_level": {
              "type": "string",
              "example": "TOP",
              "enum": [
                "TOP",
                "MIDDLE",
                "LOW"
              ]
            },
            "employment_status": {
              "type": "string",
              "example": "Full Time",
              "enum": [
                "Self Employed",
                "Full Time",
                "Casual",
                "Volunteer",
                "Shift Work",
                "Part Time"
              ]
            },
            "job_title": {
              "type": "string",
              "example": "Manager",
              "enum": [
                "Worker",
                "Supervisor",
                "Manager",
                "Senior Manager",
                "Contractor",
                "Supplier",
                "Visitor"
              ]
            },
            "employment_type": {
              "type": "string",
              "example": "Professional",
              "enum": [
                "Administration",
                "Technical",
                "Tradesperson",
                "Apprentice/Trainee",
                "Student",
                "Professional"
              ]
            },
            "external_user": {
              "type": "boolean",
              "example": false
            },
            "DOB": {
              "type": "string",
              "example": "01/01/2023"
            },
            "next_of_kin": {
              "type": "string",
              "example": "Jane Doe"
            },
            "next_of_kin_contact": {
              "type": "string",
              "example": "0212349678"
            }
          }
        },
        "UserProfile": {
          "type": "object",
          "properties": {
            "userID": {
              "type": "integer",
              "example": 1
            },
            "first_name": {
              "type": "string",
              "example": "John"
            },
            "last_name": {
              "type": "string",
              "example": "Doe"
            },
            "email": {
              "type": "string",
              "format": "email",
              "example": "john.doe@example.com"
            },
            "mobile_number": {
              "type": "string",
              "example": "0412345678"
            },
            "phone_number": {
              "type": "string",
              "example": "0212349678"
            },
            "access_level": {
              "type": "string",
              "example": "TOP",
              "enum": [
                "TOP",
                "MIDDLE",
                "LOW"
              ]
            },
            "employment_status": {
              "type": "string",
              "example": "Full Time",
              "enum": [
                "Self Employed",
                "Full Time",
                "Casual",
                "Volunteer",
                "Shift Work",
                "Part Time"
              ]
            },
            "job_title": {
              "type": "string",
              "example": "Manager",
              "enum": [
                "Worker",
                "Supervisor",
                "Manager",
                "Senior Manager",
                "Contractor",
                "Supplier",
                "Visitor"
              ]
            },
            "employment_type": {
              "type": "string",
              "example": "Professional",
              "enum": [
                "Administration",
                "Technical",
                "Tradesperson",
                "Apprentice/Trainee",
                "Student",
                "Professional"
              ]
            },
            "external_user": {
              "type": "boolean",
              "example": false
            },
            "DOB": {
              "type": "string",
              "example": "01/01/2023"
            },
            "next_of_kin": {
              "type": "string",
              "example": "Jane Doe"
            },
            "next_of_kin_contact": {
              "type": "string",
              "example": "0212349678"
            }
          }
        },
        "UserSearchResult": {
          "type": "object",
          "properties": {
            "userID": {
              "type": "integer",
              "example": 1
            },
            "first_name": {
              "type": "string",
              "example": "John"
            },
            "last_name": {
              "type": "string",
              "example": "Doe"
            },
            "email": {
              "type": "string",
              "format": "email",
              "example": "john.doe@example.com"
            },
            "mobile_number": {
              "type": "string",
              "example": "0412345678"
            },
            "phone_number": {
              "type": "string",
              "example": "0212349678"
            },
            "access_level": {
              "type": "string",
              "example": "TOP",
              "enum": [
                "TOP",
                "MIDDLE",
                "LOW"
              ]
            },
            "employment_status": {
              "type": "string",
              "example": "Full Time",
              "enum": [
                "Self Employed",
                "Full Time",
                "Casual",
                "Volunteer",
                "Shift Work",
                "Part Time"
              ]
            },
            "job_title": {
              "type": "string",
              "example": "Manager",
              "enum": [
                "Worker",
                "Supervisor",
                "Manager",
                "Senior Manager",
                "Contractor",
                "Supplier",
                "Visitor"
              ]
            },
            "employment_type": {
              "type": "string",
              "example": "Professional",
              "enum": [
                "Administration",
                "Technical",
                "Tradesperson",
                "Apprentice/Trainee",
                "Student",
                "Professional"
              ]
            },
            "external_user": {
              "type": "boolean",
              "example": false
            },
            "DOB": {
              "type": "string",
              "example": "01/01/2023"
            },
            "next_of_kin": {
              "type": "string",
              "example": "Jane Doe"
            },
            "next_of_kin_contact": {
              "type": "string",
              "example": "0212349678"
            }
          }
        },
        "LoginResponse": {
          "type": "object",
          "properties": {
            "bearer_token": {
              "$ref": "#/components/schemas/LoginResponse_bearer_token"
            }
          },
          "example": {
            "bearer_token": {
              "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c",
              "expires_in": 3600
            }
          }
        },
        "SuccessResponse": {
          "type": "object",
          "properties": {
            "error": {
              "type": "boolean",
              "example": false
            },
            "message": {
              "type": "string",
              "example": "Operation perfomed successfully"
            }
          },
          "example": {
            "error": false,
            "message": "Operation perfomed successfully"
          }
        },
        "UpdateUserResponse": {
          "type": "object",
          "properties": {
            "error": {
              "type": "boolean",
              "example": false
            },
            "message": {
              "type": "string",
              "example": "User profile updated successfully"
            },
            "updatedFields": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UpdateUserResponse_updatedFields"
              }
            }
          },
          "example": {
            "error": false,
            "message": "User profile updated successfully",
            "updatedFields": [
              "first_name",
              "last_name",
              "email"
            ]
          }
        },
        "UpdatePasswordResponse": {
          "type": "object",
          "properties": {
            "error": {
              "type": "boolean",
              "example": false
            },
            "message": {
              "type": "string",
              "example": "User password updated successfully"
            },
            "updatedFields": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UpdatePasswordResponse_updatedFields"
              }
            }
          },
          "example": {
            "error": false,
            "message": "User password updated successfully",
            "updatedFields": [
              "password",
              "bearer_token"
            ]
          }
        },
        "UpdatePinResponse": {
          "type": "object",
          "properties": {
            "error": {
              "type": "boolean",
              "example": false
            },
            "message": {
              "type": "string",
              "example": "Pin has been updated successfully"
            },
            "updatedFields": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UpdatePinResponse_updatedFields"
              }
            }
          }
        },
        "Project": {
          "type": "object",
          "properties": {
            "projectID": {
              "type": "integer",
              "example": 1
            },
            "company_name": {
              "type": "string",
              "example": "Tech Solutions"
            },
            "project_name": {
              "type": "string",
              "example": "New Office Building"
            },
            "project_description": {
              "type": "string",
              "example": "Building a new office space for Tech Solutions"
            },
            "managerID": {
              "type": "integer",
              "example": 1
            },
            "start_date": {
              "type": "string",
              "example": "01/01/2023"
            },
            "end_date": {
              "type": "string",
              "example": "01/01/2024"
            },
            "current_progress": {
              "type": "string",
              "enum": [
                "Suspended",
                "Cancelled",
                "Completed",
                "In Progress"
              ],
              "example": "In Progress"
            }
          }
        },
        "ProjectCreate": {
          "required": [
            "company_name",
            "managerID",
            "project_name",
            "start_date"
          ],
          "type": "object",
          "properties": {
            "company_name": {
              "type": "string",
              "example": "Tech Solutions"
            },
            "project_name": {
              "type": "string",
              "example": "New Office Building"
            },
            "project_description": {
              "type": "string",
              "example": "Building a new office space for Tech Solutions"
            },
            "managerID": {
              "type": "integer",
              "example": 1
            },
            "start_date": {
              "type": "string",
              "example": "01/01/2023"
            },
            "end_date": {
              "type": "string",
              "example": "01/01/2024"
            },
            "current_progress": {
              "type": "string",
              "enum": [
                "Suspended",
                "Cancelled",
                "Completed",
                "In Progress"
              ],
              "example": "In Progress"
            }
          }
        },
        "ProjectUpdate": {
          "type": "object",
          "properties": {
            "company_name": {
              "type": "string",
              "example": "Tech Solutions"
            },
            "project_name": {
              "type": "string",
              "example": "New Office Building"
            },
            "project_description": {
              "type": "string",
              "example": "Building a new office space for Tech Solutions"
            },
            "managerID": {
              "type": "integer",
              "example": 1
            },
            "start_date": {
              "type": "string",
              "example": "01/01/2023"
            },
            "end_date": {
              "type": "string",
              "example": "01/01/2024"
            },
            "current_progress": {
              "type": "string",
              "enum": [
                "Suspended",
                "Cancelled",
                "Completed",
                "In Progress"
              ],
              "example": "In Progress"
            }
          }
        },
        "ProjectCreatedResponse": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean",
              "example": true
            },
            "projectID": {
              "type": "integer",
              "example": 1
            }
          }
        },
        "Activity": {
          "type": "object",
          "properties": {
            "activityID": {
              "type": "integer",
              "example": 1
            },
            "activity_name": {
              "type": "string",
              "example": "Initial Project Planning"
            },
            "activity_description": {
              "type": "string",
              "example": "Conducting meetings to outline project goals and deliverables."
            },
            "projectID": {
              "type": "integer",
              "example": 1
            },
            "person_responsible": {
              "type": "integer",
              "example": 1
            },
            "progress": {
              "type": "string",
              "enum": [
                "On Target",
                "Overdue",
                "Suspended",
                "Cancelled",
                "Completed"
              ],
              "example": "On Target"
            },
            "location": {
              "type": "integer",
              "example": 1
            },
            "start_date": {
              "type": "string",
              "example": "01/01/2023"
            },
            "end_date": {
              "type": "string",
              "example": "01/01/2024"
            }
          }
        },
        "ActivityCreate": {
          "required": [
            "activity_name",
            "location",
            "person_responsible",
            "projectID",
            "start_date"
          ],
          "type": "object",
          "properties": {
            "activity_name": {
              "type": "string",
              "example": "Initial Project Planning"
            },
            "activity_description": {
              "type": "string",
              "example": "Conducting meetings to outline project goals and deliverables."
            },
            "projectID": {
              "type": "integer",
              "example": 1
            },
            "person_responsible": {
              "type": "integer",
              "example": 1
            },
            "progress": {
              "type": "string",
              "enum": [
                "On Target",
                "Overdue",
                "Suspended",
                "Cancelled",
                "Completed"
              ],
              "example": "On Target"
            },
            "location": {
              "type": "integer",
              "example": 1
            },
            "start_date": {
              "type": "string",
              "format": "date",
              "example": "01/01/2023"
            },
            "end_date": {
              "type": "string",
              "format": "date",
              "example": "01/01/2024"
            }
          }
        },
        "ActivityUpdate": {
          "type": "object",
          "properties": {
            "activity_name": {
              "type": "string",
              "example": "Updated Project Planning"
            },
            "activity_description": {
              "type": "string",
              "example": "Revised meetings to redefine project goals and deliverables."
            },
            "projectID": {
              "type": "integer",
              "example": 1
            },
            "person_responsible": {
              "type": "integer",
              "example": 2
            },
            "progress": {
              "type": "string",
              "enum": [
                "On Target",
                "Overdue",
                "Suspended",
                "Cancelled",
                "Completed"
              ],
              "example": "On Target"
            },
            "location": {
              "type": "integer",
              "example": 1
            },
            "start_date": {
              "type": "string",
              "example": "01/01/2023"
            },
            "end_date": {
              "type": "string",
              "example": "01/01/2024"
            }
          }
        },
        "ActivityUpdateResponse": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "example": "Activity updated successfully for the following fields:"
            },
            "updatedFields": {
              "type": "array",
              "example": [
                "activity_name",
                "progress"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        },
        "UserActivityDetails": {
          "type": "object",
          "properties": {
            "userID": {
              "type": "integer",
              "example": 1
            },
            "activityID": {
              "type": "integer",
              "example": 1
            },
            "activityName": {
              "type": "string",
              "example": "Initital Project Planning"
            },
            "role": {
              "type": "string",
              "example": "Participant",
              "enum": [
                "Participant",
                "Organizer",
                "Observer"
              ]
            },
            "status": {
              "type": "string",
              "example": "Pending",
              "enum": [
                "Completed",
                "Pending",
                "Cancelled"
              ]
            },
            "start_date": {
              "type": "string",
              "example": "01/01/2023"
            },
            "end_date": {
              "type": "string",
              "example": "01/01/2024"
            },
            "notes": {
              "type": "string",
              "example": "Led the initial project planning meeting"
            },
            "participationLevel": {
              "type": "string",
              "example": "Medium",
              "enum": [
                "High",
                "Medium",
                "Low"
              ]
            }
          }
        },
        "UserActivityAdd": {
          "required": [
            "userID"
          ],
          "type": "object",
          "properties": {
            "userID": {
              "type": "integer",
              "example": 2
            },
            "role": {
              "type": "string",
              "example": "Participant"
            }
          }
        },
        "Location": {
          "type": "object",
          "properties": {
            "locationID": {
              "type": "integer",
              "example": 1
            },
            "name": {
              "type": "string",
              "example": "Sample Location"
            },
            "address": {
              "type": "string",
              "example": "123 Example St"
            },
            "city": {
              "type": "string",
              "example": "Brisbane"
            },
            "suburb": {
              "type": "string",
              "example": "Southbank"
            },
            "state": {
              "type": "string",
              "enum": [
                "New South Wales",
                "Victoria",
                "Queensland",
                "South Australia",
                "Western Australia",
                "Tasmania",
                "Australian Capital Territory",
                "Northern Territory"
              ],
              "example": "Queensland"
            },
            "post_code": {
              "type": "string",
              "example": "4101"
            }
          }
        },
        "LocationCreate": {
          "required": [
            "address",
            "city",
            "name",
            "post_code",
            "state",
            "suburb"
          ],
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "example": "Sample Location 2"
            },
            "address": {
              "type": "string",
              "example": "456 Main Ave"
            },
            "city": {
              "type": "string",
              "example": "Brisbane"
            },
            "suburb": {
              "type": "string",
              "example": "Southbank"
            },
            "state": {
              "type": "string",
              "enum": [
                "New South Wales",
                "Victoria",
                "Queensland",
                "South Australia",
                "Western Australia",
                "Tasmania",
                "Australian Capital Territory",
                "Northern Territory"
              ],
              "example": "Queensland"
            },
            "post_code": {
              "type": "string",
              "example": "4101"
            }
          }
        },
        "LocationUpdate": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "example": "Updated Sample Location 2"
            },
            "address": {
              "type": "string",
              "example": "456 Main Ave"
            },
            "city": {
              "type": "string",
              "example": "Brisbane"
            },
            "suburb": {
              "type": "string",
              "example": "Southbank"
            },
            "state": {
              "type": "string",
              "enum": [
                "New South Wales",
                "Victoria",
                "Queensland",
                "South Australia",
                "Western Australia",
                "Tasmania",
                "Australian Capital Territory",
                "Northern Territory"
              ],
              "example": "Queensland"
            },
            "post_code": {
              "type": "string",
              "example": "4101"
            }
          }
        },
        "Action": {
          "required": [
            "actions_required",
            "priority_level",
            "current_status",
            "date_opened",
            "element_type",
            "elementID",
            "person_responsible_for_resolve"
          ],
          "type": "object",
          "properties": {
            "actionID": {
              "type": "integer",
              "example": 1
            },
            "actions_required": {
              "type": "string",
              "example": "Fix structural issues in building"
            },
            "priority_level": {
              "type": "string",
              "enum": [
                "A - NO WORK/ACCESS til fixed",
                "B - Action IMMEDIATELY",
                "C - Item to be attended to within 24 HOURS",
                "D - Rectified within NOMINATED TIME",
                "N/A - Not Applicable",
                "R - Issue Rectified in Inspection"
              ]
            },
            "current_status": {
              "type": "string",
              "enum": [
                "Open",
                "Closed"
              ],
              "example": "Open"
            },
            "date_opened": {
              "type": "string",
              "example": "01/01/2023"
            },
            "date_closed": {
              "type": "string",
              "nullable": true,
              "example": "01/02/2023"
            },
            "element_type": {
              "type": "string",
              "enum": [
                "Hazards",
                "InspectionCheckListResponses",
                "MeetingTopics"
              ]
            },
            "elementID": {
              "type": "integer",
              "example": 123
            },
            "person_responsible_for_resolve": {
              "type": "integer",
              "example": 456
            }
          }
        },
        "ActionCreate": {
          "required": [
            "actions_required",
            "priority_level",
            "element_type",
            "elementID",
            "person_responsible_for_resolve"
          ],
          "type": "object",
          "properties": {
            "actions_required": {
              "type": "string",
              "example": "Fix Wall."
            },
            "priority_level": {
              "type": "string",
              "enum": [
                "A - NO WORK/ACCESS til fixed",
                "B - Action IMMEDIATELY",
                "C - Item to be attended to within 24 HOURS",
                "D - Rectified within NOMINATED TIME",
                "N/A - Not Applicable",
                "R - Issue Rectified in Inspection"
              ],
              "example": "B - Action IMMEDIATELY"
            },
            "element_type": {
              "type": "string",
              "enum": [
                "Hazards",
                "InspectionCheckListResponses",
                "MeetingTopics"
              ],
              "example": "InspectionCheckListResponses"
            },
            "elementID": {
              "type": "integer",
              "example": 1
            },
            "person_responsible_for_resolve": {
              "type": "integer",
              "example": 1
            }
          }
        },
        "ActionUpdate": {
          "required": [
            "current_status"
          ],
          "type": "object",
          "properties": {
            "actions_required": {
              "type": "string",
              "example": "Fix hazard",
              "description": "The actions required to resolve the issue"
            },
            "priority_level": {
              "type": "string",
              "enum": [
                "A - NO WORK/ACCESS til fixed",
                "B - Action IMMEDIATELY",
                "C - Item to be attended to within 24 HOURS",
                "D - Rectified within NOMINATED TIME",
                "N/A - Not Applicable",
                "R - Issue Rectified in Inspection"
              ],
              "example": "B - Action IMMEDIATELY",
              "description": "Priority level for the action"
            },
            "current_status": {
              "type": "string",
              "enum": [
                "Open",
                "Closed"
              ],
              "example": "Closed",
              "description": "The current status of the action"
            },
            "person_responsible_for_resolve": {
              "type": "integer",
              "example": 3,
              "description": "User ID of the person responsible for resolving the action"
            }
          },
          "example": {
            "actions_required": "Fix hazard in electrical system",
            "priority_level": "A - NO WORK/ACCESS til fixed",
            "current_status": "Closed",
            "person_responsible_for_resolve": 3
          }
        },
        "Inspection": {
          "type": "object",
          "properties": {
            "inspectionID": {
              "type": "integer",
              "example": "1",
              "description": "Unique identifier for the inspection"
            },
            "activityID": {
              "type": "integer",
              "example": "1",
              "description": "ID of the associated activity"
            },
            "inspector": {
              "type": "integer",
              "example": "1",
              "description": "ID of the user who conducted the inspection"
            },
            "inspection_date": {
              "type": "string",
              "format": "date",
              "example": "01/02/2024",
              "description": "Date the inspection was conducted"
            },
            "inspection_start": {
              "type": "string",
              "format": "date-time",
              "example": "09:00:00",
              "description": "Start time of the inspection"
            },
            "inspection_end": {
              "type": "string",
              "format": "date-time",
              "example": "11:00:00",
              "description": "End time of the inspection"
            },
            "inspection_type": {
              "type": "string",
              "enum": [
                "Building",
                "Weekly Construction"
              ],
              "description": "Type of the inspection",
              "example": "Building"
            },
            "general_notes": {
              "type": "string",
              "description": "General notes regarding the inspection",
              "example": "All safety protocols followed, minor issues addressed"
            },
            "location": {
              "type": "integer",
              "description": "ID of the location where the inspection took place",
              "example": "1"
            },
            "status": {
              "type": "string",
              "enum": [
                "Planned",
                "On-Going",
                "Complete"
              ],
              "description": "Status of the inspection",
              "example": "Complete"
            }
          }
        },
        "InspectionCreate": {
          "required": [
            "activityID",
            "inspection_end",
            "inspection_start",
            "inspection_type",
            "inspector",
            "location"
          ],
          "type": "object",
          "properties": {
            "activityID": {
              "type": "integer",
              "example": 1
            },
            "inspector": {
              "type": "integer",
              "example": 1
            },
            "inspection_date": {
              "type": "string",
              "format": "date",
              "example": "01/01/2023"
            },
            "inspection_start": {
              "type": "string",
              "format": "time",
              "example": "09:00:00"
            },
            "inspection_end": {
              "type": "string",
              "format": "time",
              "example": "11:00:00"
            },
            "inspection_type": {
              "type": "string",
              "example": "Building",
              "enum": [
                "Building",
                "Weekly Construction"
              ]
            },
            "general_notes": {
              "type": "string",
              "example": "Initial Building inspection"
            },
            "location": {
              "type": "integer",
              "example": 1
            },
            "status": {
              "type": "string",
              "enum": [
                "Planned",
                "On-Going",
                "Complete"
              ],
              "example": "Planned"
            }
          }
        },
        "InspectionUpdate": {
          "type": "object",
          "properties": {
            "inspection_date": {
              "type": "string",
              "format": "date",
              "example": "16/10/2024"
            },
            "inspection_start": {
              "type": "string",
              "format": "time",
              "example": "09:00:00"
            },
            "inspection_end": {
              "type": "string",
              "format": "time",
              "example": "11:00:00"
            },
            "inspection_type": {
              "type": "string",
              "example": "Building",
              "enum": [
                "Building",
                "Weekly Construction"
              ]
            },
            "general_notes": {
              "type": "string",
              "example": "Initial Building inspection"
            },
            "location": {
              "type": "integer",
              "example": 1
            },
            "status": {
              "type": "string",
              "example": "Complete",
              "enum": [
                "Planned",
                "On-Going",
                "Complete"
              ]
            },
            "inspector": {
              "type": "integer",
              "example": 1
            }
          }
        },
        "InspectionCheckListResponseAdd": {
          "required": [
            "checklistID",
            "inspectionID",
            "comments",
            "compliance_level_achieved"
          ],
          "type": "object",
          "properties": {
            "checklistID": {
              "type": "integer",
              "example": 1,
              "description": "ID of the checklist item being responded to"
            },
            "inspectionID": {
              "type": "integer",
              "example": 101,
              "description": "ID of the inspection associated with the checklist item"
            },
            "comments": {
              "type": "string",
              "example": "Checked and found in good condition",
              "description": "Comments regarding the compliance of the checklist item"
            },
            "compliance_level_achieved": {
              "type": "string",
              "enum": [
                "Compliance",
                "Non-Compliance",
                "Not Applicable",
                "Unable to Verify compliance needs further investigation",
                "Pending Assessment"
              ],
              "example": "Pending Assessment",
              "description": "The compliance level achieved for this checklist item"
            }
          },
          "example": {
            "checklistID": 1,
            "inspectionID": 101,
            "comments": "Checked and found in good condition",
            "compliance_level_achieved": "Pending Assessment"
          }
        },
        "InspectionCheckListResponseUpdate": {
          "type": "object",
          "properties": {
            "comments": {
              "type": "string",
              "example": "Updated comment about the inspection checklist item",
              "description": "Comments regarding the compliance of the checklist item"
            },
            "compliance_level_achieved": {
              "type": "string",
              "enum": [
                "Compliance",
                "Non-Compliance",
                "Not Applicable",
                "Unable to Verify compliance needs further investigation",
                "Pending Assessment"
              ],
              "example": "Compliant",
              "description": "The updated compliance level for the checklist item"
            }
          },
          "example": {
            "comments": "Updated comment about the checklist item.",
            "compliance_level_achieved": "Compliant"
          }
        },
        "RiskAssessment": {
          "required": [
            "activityID",
            "assessment_date",
            "assessor",
            "location",
            "review_needed"
          ],
          "type": "object",
          "properties": {
            "assessmentID": {
              "type": "integer",
              "example": 1
            },
            "activityID": {
              "type": "integer",
              "example": 1
            },
            "assessment_date": {
              "type": "string",
              "format": "date",
              "example": "15/01/2024"
            },
            "review_needed": {
              "type": "string",
              "format": "date",
              "example": "15/07/2024"
            },
            "assessor": {
              "type": "integer",
              "example": 1
            },
            "location": {
              "type": "integer",
              "example": 1
            }
          }
        },
        "RiskAssessmentCreate": {
          "required": [
            "assessment_date",
            "assessor",
            "location",
            "review_needed"
          ],
          "type": "object",
          "properties": {
            "assessment_date": {
              "type": "string",
              "format": "date",
              "example": "01/01/2023"
            },
            "review_needed": {
              "type": "string",
              "format": "date",
              "example": "01/01/2024"
            },
            "assessor": {
              "type": "integer",
              "example": 1
            },
            "location": {
              "type": "integer",
              "example": 1
            }
          }
        },
        "RiskAssessmentUpdate": {
          "required": [
            "assessment_date",
            "assessor",
            "location",
            "review_needed"
          ],
          "type": "object",
          "properties": {
            "assessment_date": {
              "type": "string",
              "format": "date",
              "example": "01/01/2023"
            },
            "review_needed": {
              "type": "string",
              "format": "date",
              "example": "01/01/2024"
            },
            "assessor": {
              "type": "integer",
              "example": 3
            },
            "location": {
              "type": "integer",
              "example": 2
            }
          }
        },
        "Hazard": {
          "required": [
            "assessmentID",
            "label",
            "risk_level_before_controls",
            "risk_score_before_controls",
            "specific_area"
          ],
          "type": "object",
          "properties": {
            "hazardID": {
              "type": "integer"
            },
            "assessmentID": {
              "type": "integer"
            },
            "label": {
              "type": "string"
            },
            "specific_area": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "recommended_controls": {
              "type": "string"
            },
            "risk_level_before_controls": {
              "type": "string",
              "enum": [
                "Low",
                "Medium",
                "High",
                "Emergency"
              ]
            },
            "risk_score_before_controls": {
              "type": "integer"
            },
            "risk_level_after_controls": {
              "type": "string",
              "enum": [
                "Low",
                "Medium",
                "High",
                "Emergency"
              ]
            },
            "risk_score_after_controls": {
              "type": "integer"
            },
            "further_controls_needed": {
              "type": "string"
            },
            "document": {
              "type": "integer"
            }
          }
        },
        "HazardCreate": {
          "required": [
            "assessmentID",
            "label",
            "specific_area",
            "risk_level_before_controls",
            "risk_score_before_controls"
          ],
          "type": "object",
          "properties": {
            "assessmentID": {
              "type": "integer",
              "example": 1
            },
            "label": {
              "type": "string",
              "example": "Electrical Hazards"
            },
            "specific_area": {
              "type": "string",
              "example": "Wiring Installation"
            },
            "description": {
              "type": "string",
              "example": "Risk of electric shock during wiring installation"
            },
            "recommended_controls": {
              "type": "string",
              "example": "Use of insulated tools and protective equipment"
            },
            "risk_level_before_controls": {
              "type": "string",
              "enum": [
                "Low",
                "Medium",
                "High",
                "Emergency"
              ],
              "example": "High"
            },
            "risk_score_before_controls": {
              "type": "integer",
              "example": 18
            },
            "risk_level_after_controls": {
              "type": "string",
              "enum": [
                "Low",
                "Medium",
                "High",
                "Emergency"
              ],
              "example": "Low"
            },
            "risk_score_after_controls": {
              "type": "integer",
              "example": 4
            },
            "further_controls_needed": {
              "type": "string",
              "example": "Regular electrical safety training"
            },
            "document": {
              "type": "integer",
              "example": 2
            }
          }
        },
        "HazardUpdate": {
          "type": "object",
          "properties": {
            "label": {
              "type": "string",
              "example": "Updated: Electrical Hazards"
            },
            "specific_area": {
              "type": "string",
              "example": "Updated: Wiring Installation"
            },
            "description": {
              "type": "string",
              "example": "Updated risk assessment for electrical work"
            },
            "recommended_controls": {
              "type": "string",
              "example": "Enhanced safety measures and improved insulation"
            },
            "risk_level_before_controls": {
              "type": "string",
              "enum": [
                "Low",
                "Medium",
                "High",
                "Emergency"
              ],
              "example": "Medium"
            },
            "risk_score_before_controls": {
              "type": "integer",
              "example": 10
            },
            "risk_level_after_controls": {
              "type": "string",
              "enum": [
                "Low",
                "Medium",
                "High",
                "Emergency"
              ],
              "example": "Very Low"
            },
            "risk_score_after_controls": {
              "type": "integer",
              "example": 2
            },
            "further_controls_needed": {
              "type": "string",
              "example": "Implement new safety protocols"
            },
            "document": {
              "type": "integer",
              "example": 3
            }
          }
        },
        "ChecklistItem": {
          "required": [
            "prompt",
            "prompt_item_type",
            "inspection_type"
          ],
          "type": "object",
          "properties": {
            "checklistID": {
              "type": "integer",
              "example": 1
            },
            "prompt": {
              "type": "string",
              "example": "Are all safety signs clearly visible and in good condition?"
            },
            "prompt_item_type": {
              "type": "string",
              "enum": [
                "MAIN BUILDING",
                "AMENITIES",
                "EMERGENCIES/INCIDENTS",
                "CEILING & ROOF AREAS",
                "LADDERS",
                "ELECTRICAL",
                "PLANT & EQUIPMENT",
                "MOBILE PLANT",
                "CRANES & HOISTS",
                "MANUAL TASKS",
                "MAIN ENVIRONMENT",
                "NOISE",
                "HAZARDOUS CHEMICALS",
                "SILICA",
                "OUTSIDE AREAS",
                "BEHAVIOURAL",
                "OTHER HAZARDS",
                "SCAFFOLD/FORMWORK",
                "PUBLIC PROTECTION",
                "WELDING / HOT WORK",
                "TRENCHES AND EXCAVATIONS",
                "EDGE PROTECTION",
                "FALL PROTECTION COVER",
                "HARNESS SYSTEM",
                "PERSONAL PROTECTIVE EQUIPMENT",
                "EMERGENCY EQUIPMENT"
              ],
              "example": "MAIN BUILDING"
            },
            "inspection_type": {
              "type": "string",
              "enum": [
                "Building",
                "Weekly Construction",
                "N/A"
              ],
              "example": "Building"
            }
          }
        },
        "ChecklistItemCreate": {
          "required": [
            "prompt",
            "prompt_item_type",
            "prompt_type",
            "inspection_type"
          ],
          "type": "object",
          "properties": {
            "prompt": {
              "type": "string",
              "example": "Record the current temperature in Celsius"
            },
            "prompt_item_type": {
              "type": "string",
              "enum": [
                "MAIN BUILDING",
                "AMENITIES",
                "EMERGENCIES/INCIDENTS",
                "CEILING & ROOF AREAS",
                "LADDERS",
                "ELECTRICAL",
                "PLANT & EQUIPMENT",
                "MOBILE PLANT",
                "CRANES & HOISTS",
                "MANUAL TASKS",
                "MAIN ENVIRONMENT",
                "NOISE",
                "HAZARDOUS CHEMICALS",
                "SILICA",
                "OUTSIDE AREAS",
                "BEHAVIOURAL",
                "OTHER HAZARDS",
                "SCAFFOLD/FORMWORK",
                "PUBLIC PROTECTION",
                "WELDING / HOT WORK",
                "TRENCHES AND EXCAVATIONS",
                "EDGE PROTECTION",
                "FALL PROTECTION COVER",
                "HARNESS SYSTEM",
                "PERSONAL PROTECTIVE EQUIPMENT",
                "EMERGENCY EQUIPMENT"
              ]
            },
            "prompt_type": {
              "type": "string",
              "enum": [
                "DateTime",
                "Text",
                "Boolean",
                "Numeric",
                "Image"
              ],
              "example": "Numeric"
            },
            "inspection_type": {
              "type": "string",
              "enum": [
                "Building",
                "Weekly Construction",
                "N/A"
              ],
              "example": "Building",
              "description": "The type of inspection that this checklist item belongs to"
            }
          }
        },
        "ChecklistItemUpdate": {
          "required": [
            "prompt",
            "prompt_item_type",
            "inspection_type"
          ],
          "type": "object",
          "properties": {
            "prompt": {
              "type": "string",
              "example": "Are all fire extinguishers easily accessible and in working order?"
            },
            "prompt_item_type": {
              "type": "string",
              "enum": [
                "MAIN BUILDING",
                "AMENITIES",
                "EMERGENCIES/INCIDENTS",
                "CEILING & ROOF AREAS",
                "LADDERS",
                "ELECTRICAL",
                "PLANT & EQUIPMENT",
                "MOBILE PLANT",
                "CRANES & HOISTS",
                "MANUAL TASKS",
                "MAIN ENVIRONMENT",
                "NOISE",
                "HAZARDOUS CHEMICALS",
                "SILICA",
                "OUTSIDE AREAS",
                "BEHAVIOURAL",
                "OTHER HAZARDS",
                "SCAFFOLD/FORMWORK",
                "PUBLIC PROTECTION",
                "WELDING / HOT WORK",
                "TRENCHES AND EXCAVATIONS",
                "EDGE PROTECTION",
                "FALL PROTECTION COVER",
                "HARNESS SYSTEM",
                "PERSONAL PROTECTIVE EQUIPMENT",
                "EMERGENCY EQUIPMENT"
              ],
              "example": "EMERGENCIES/INCIDENTS"
            },
            "inspection_type": {
              "type": "string",
              "enum": [
                "Building",
                "Weekly Construction",
                "N/A"
              ],
              "example": "Building",
              "description": "The type of inspection this checklist item is associated with"
            }
          }
        },
        "Meeting": {
          "required": [
            "activityID",
            "meeting_end",
            "meeting_name",
            "meeting_start",
            "meeting_date"
          ],
          "type": "object",
          "properties": {
            "meetingID": {
              "type": "integer",
              "example": "1"
            },
            "activityID": {
              "type": "integer",
              "example": "1"
            },
            "meeting_start": {
              "type": "string",
              "format": "date-time",
              "example": "09:00:00"
            },
            "meeting_end": {
              "type": "string",
              "format": "date-time",
              "example": "10:00:00"
            },
            "meeting_date": {
              "type": "string",
              "format": "date",
              "example": "10/01/2024"
            },
            "meeting_name": {
              "type": "string",
              "example": "Project Kickoff Meeting"
            },
            "meeting_notes": {
              "type": "string",
              "example": "Discussed project goals, timeline, and team responsibilities"
            }
          }
        },
        "MeetingCreate": {
          "required": [
            "meeting_date",
            "meeting_start",
            "meeting_end",
            "meeting_name"
          ],
          "type": "object",
          "properties": {
            "meeting_date": {
              "type": "string",
              "format": "date",
              "example": "01/01/2023"
            },
            "meeting_start": {
              "type": "string",
              "format": "time",
              "example": "14:00:00"
            },
            "meeting_end": {
              "type": "string",
              "format": "time",
              "example": "15:00:00"
            },
            "meeting_name": {
              "type": "string",
              "example": "Safety Briefing"
            },
            "meeting_notes": {
              "type": "string",
              "example": "Monthly safety procedures review and updates"
            }
          }
        },
        "MeetingUpdate": {
          "type": "object",
          "properties": {
            "meeting_date": {
              "type": "string",
              "format": "date",
              "example": "01/01/2024"
            },
            "meeting_start": {
              "type": "string",
              "format": "time",
              "example": "09:00:00"
            },
            "meeting_end": {
              "type": "string",
              "format": "time",
              "example": "10:00:00"
            },
            "meeting_name": {
              "type": "string",
              "example": "Updated Project Kickoff Meeting"
            },
            "meeting_notes": {
              "type": "string",
              "example": "Updated: Discussed project goals, timeline, and team responsibilities"
            }
          },
          "required": [
            "meeting_date",
            "meeting_start",
            "meeting_end",
            "meeting_name"
          ]
        },
        "MeetingParticipant": {
          "required": [
            "meetingID",
            "userID",
            "meeting_position"
          ],
          "type": "object",
          "properties": {
            "meetingID": {
              "type": "integer",
              "description": "ID of the meeting the participant is part of",
              "example": 1
            },
            "userID": {
              "type": "integer",
              "description": "ID of the user participating in the meeting",
              "example": 3
            },
            "meeting_position": {
              "type": "string",
              "description": "The role of the participant in the meeting",
              "enum": [
                "Presenter",
                "Worker",
                "Contractor"
              ],
              "example": "Worker"
            },
            "attendance_status": {
              "type": "boolean",
              "description": "Whether the participant attended the meeting",
              "example": true
            }
          }
        },
        "MeetingParticipantAdd": {
          "required": [
            "meetingID",
            "users",
            "meeting_position"
          ],
          "type": "object",
          "properties": {
            "meetingID": {
              "type": "integer"
            },
            "users": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "meeting_position": {
              "type": "string",
              "enum": [
                "Presenter",
                "Worker",
                "Contractor"
              ]
            }
          },
          "example": {
            "meetingID": 1,
            "users": [
              1,
              2,
              3
            ],
            "meeting_position": "Contractor"
          }
        },
        "MeetingTopic": {
          "required": [
            "description_of_discussion",
            "meetingID",
            "subject_item"
          ],
          "type": "object",
          "properties": {
            "topicID": {
              "type": "integer"
            },
            "meetingID": {
              "type": "integer"
            },
            "subject_item": {
              "type": "string",
              "enum": [
                "Hazards in general",
                "Safety in Design",
                "Training",
                "Access and Egress",
                "Housekeeping",
                "Safety Behaviours",
                "Incidents",
                "Issues arising from reports",
                "Notices from Authorities or internal",
                "Other"
              ]
            },
            "description_of_discussion": {
              "type": "string"
            },
            "subject_discussed": {
              "type": "boolean"
            }
          },
          "example": {
            "topicID": 1,
            "meetingID": 1,
            "subject_item": "Safety in Design",
            "description_of_discussion": "Reviewed recent changes to safety protocols in project design",
            "subject_discussed": true
          }
        },
        "MeetingTopicCreate": {
          "required": [
            "description_of_discussion",
            "meetingID",
            "subject_item"
          ],
          "type": "object",
          "properties": {
            "meetingID": {
              "type": "integer",
              "description": "The ID of the meeting the topic is associated with",
              "example": 1
            },
            "subject_item": {
              "type": "string",
              "description": "The subject of the discussion",
              "enum": [
                "Hazards in general",
                "Safety in Design",
                "Training",
                "Access and Egress",
                "Housekeeping",
                "Safety Behaviours",
                "Incidents",
                "Issues arising from reports",
                "Notices from Authorities or internal",
                "Other"
              ],
              "example": "Training"
            },
            "description_of_discussion": {
              "type": "string",
              "description": "A description of the discussion",
              "example": "Discussed upcoming safety training sessions for new equipment",
              "maxLength": 400
            }
          }
        },
        "MeetingTopicUpdate": {
          "required": [
            "description_of_discussion",
            "subject_item"
          ],
          "type": "object",
          "properties": {
            "subject_item": {
              "type": "string",
              "enum": [
                "Hazards in general",
                "Safety in Design",
                "Training",
                "Access and Egress",
                "Housekeeping",
                "Safety Behaviours",
                "Incidents",
                "Issues arising from reports",
                "Notices from Authorities or internal",
                "Other"
              ],
              "description": "The subject of the discussion"
            },
            "description_of_discussion": {
              "type": "string",
              "description": "A description of the discussion",
              "example": "Updated: Finalized dates for safety training sessions"
            },
            "subject_discussed": {
              "type": "boolean",
              "description": "Indicates whether the subject was discussed during the meeting",
              "example": true
            }
          },
          "example": {
            "subject_item": "Training",
            "description_of_discussion": "Updated: Finalized dates for safety training sessions",
            "subject_discussed": true
          }
        },
        "BuildingInspectionReport": {
          "required": [
            "activityID",
            "inspectionID",
            "inspection_end",
            "inspection_start",
            "inspection_type",
            "inspector",
            "location",
            "status"
          ],
          "type": "object",
          "properties": {
            "inspectionID": {
              "type": "integer"
            },
            "activityID": {
              "type": "integer"
            },
            "inspector": {
              "type": "integer"
            },
            "inspection_start": {
              "type": "string",
              "format": "date-time"
            },
            "inspection_end": {
              "type": "string",
              "format": "date-time"
            },
            "inspection_type": {
              "type": "string",
              "enum": [
                "Building",
                "Weekly Construction"
              ]
            },
            "general_notes": {
              "type": "string"
            },
            "location": {
              "type": "integer"
            },
            "status": {
              "type": "string",
              "enum": [
                "Planned",
                "On-Going",
                "Complete"
              ]
            },
            "checklist_items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ChecklistItemResponse"
              }
            }
          },
          "example": {
            "inspectionID": 1,
            "activityID": 1,
            "inspector": 1,
            "inspection_start": "2024-03-20T09:00:00Z",
            "inspection_end": "2024-03-20T12:00:00Z",
            "inspection_type": "Building",
            "general_notes": "Comprehensive inspection of main building structure",
            "location": 1,
            "status": "Complete",
            "checklist_items": [
              {
                "checklistItemID": 1,
                "prompt": "Are all fire exits clear and accessible?",
                "response": "Yes",
                "compliance_status": "Compliant",
                "notes": "All fire exits are properly marked and accessible"
              }
            ]
          }
        },
        "WeeklyConstructionReport": {
          "required": [
            "activityID",
            "inspectionID",
            "inspection_end",
            "inspection_start",
            "inspection_type",
            "inspector",
            "location",
            "status"
          ],
          "type": "object",
          "properties": {
            "inspectionID": {
              "type": "integer"
            },
            "activityID": {
              "type": "integer"
            },
            "inspector": {
              "type": "integer"
            },
            "inspection_start": {
              "type": "string",
              "format": "date-time"
            },
            "inspection_end": {
              "type": "string",
              "format": "date-time"
            },
            "inspection_type": {
              "type": "string",
              "enum": [
                "Building",
                "Weekly Construction"
              ]
            },
            "general_notes": {
              "type": "string"
            },
            "location": {
              "type": "integer"
            },
            "status": {
              "type": "string",
              "enum": [
                "Planned",
                "On-Going",
                "Complete"
              ]
            },
            "checklist_items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ChecklistItemResponse"
              }
            },
            "progress_update": {
              "type": "string"
            }
          },
          "example": {
            "inspectionID": 2,
            "activityID": 1,
            "inspector": 2,
            "inspection_start": "2024-03-22T08:00:00Z",
            "inspection_end": "2024-03-22T10:00:00Z",
            "inspection_type": "Weekly Construction",
            "general_notes": "Weekly inspection of ongoing construction activities",
            "location": 1,
            "status": "Complete",
            "checklist_items": [
              {
                "checklistItemID": 2,
                "prompt": "Are all workers wearing appropriate PPE?",
                "response": "Yes",
                "compliance_status": "Compliant",
                "notes": "All workers observed wearing required PPE"
              }
            ],
            "progress_update": "Construction is on schedule. Foundation work 80% complete."
          }
        },
        "HazardReport": {
          "required": [
            "assessmentID",
            "assessment_date",
            "assessor",
            "hazards",
            "location",
            "overall_risk_level",
            "review_needed"
          ],
          "type": "object",
          "properties": {
            "assessmentID": {
              "type": "integer"
            },
            "assessment_date": {
              "type": "string",
              "format": "date"
            },
            "review_needed": {
              "type": "string",
              "format": "date"
            },
            "assessor": {
              "type": "integer"
            },
            "location": {
              "type": "integer"
            },
            "hazards": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Hazard"
              }
            },
            "overall_risk_level": {
              "type": "string",
              "enum": [
                "Low",
                "Medium",
                "High",
                "Critical"
              ]
            },
            "recommended_actions": {
              "type": "string"
            }
          },
          "example": {
            "assessmentID": 1,
            "assessment_date": "2024-03-25",
            "review_needed": "2024-09-25",
            "assessor": 1,
            "location": 1,
            "hazards": [
              {
                "hazardID": 1,
                "label": "Falling Objects",
                "specific_area": "Construction Site",
                "risk_level_before_controls": "High",
                "risk_score_before_controls": 20,
                "risk_level_after_controls": "Low",
                "risk_score_after_controls": 5
              }
            ],
            "overall_risk_level": "Medium",
            "recommended_actions": "Implement enhanced safety measures for working at heights"
          }
        },
        "ToolboxTalkForm": {
          "required": [
            "activityID",
            "attendees",
            "meetingID",
            "meeting_end",
            "meeting_name",
            "meeting_start",
            "topics"
          ],
          "type": "object",
          "properties": {
            "meetingID": {
              "type": "integer"
            },
            "activityID": {
              "type": "integer"
            },
            "meeting_start": {
              "type": "string",
              "format": "date-time"
            },
            "meeting_end": {
              "type": "string",
              "format": "date-time"
            },
            "meeting_name": {
              "type": "string"
            },
            "meeting_notes": {
              "type": "string"
            },
            "topics": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/MeetingTopic"
              }
            },
            "attendees": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/MeetingParticipant"
              }
            },
            "action_items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ToolboxTalkForm_action_items"
              }
            },
            "safety_concerns_raised": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "example": {
            "meetingID": 1,
            "activityID": 1,
            "meeting_start": "2024-03-26T07:30:00Z",
            "meeting_end": "2024-03-26T08:00:00Z",
            "meeting_name": "Weekly Safety Toolbox Talk: Working at Heights",
            "meeting_notes": "Discussed proper use of fall protection equipment",
            "topics": [
              {
                "topicID": 1,
                "subject_item": "Safety Behaviours",
                "description_of_discussion": "Proper use of safety harnesses"
              }
            ],
            "attendees": [
              {
                "userID": 1,
                "meeting_position": "Presenter",
                "attendance_status": true
              }
            ],
            "action_items": [
              {
                "description": "Inspect all safety harnesses",
                "assigned_to": 2,
                "due_date": "2024-03-28"
              }
            ],
            "safety_concerns_raised": [
              "Some harnesses showing signs of wear",
              "Need for additional anchor points in new construction area"
            ]
          }
        },
        "ChecklistItemResponse": {
          "required": [
            "checklistItemID",
            "compliance_status",
            "prompt",
            "response"
          ],
          "type": "object",
          "properties": {
            "checklistItemID": {
              "type": "integer"
            },
            "prompt": {
              "type": "string"
            },
            "response": {
              "type": "string"
            },
            "compliance_status": {
              "type": "string",
              "enum": [
                "Compliant",
                "Non-Compliant",
                "Not Applicable"
              ]
            },
            "notes": {
              "type": "string"
            }
          },
          "example": {
            "checklistItemID": 1,
            "prompt": "Are all fall protection systems properly installed and inspected?",
            "response": "Yes",
            "compliance_status": "Compliant",
            "notes": "Daily checks implemented. Two anchor points flagged for re-inspection next week."
          }
        },
        "MissingFieldsError": {
          "type": "object",
          "properties": {
            "error": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "missingFields": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "InvalidInputError": {
          "type": "object",
          "properties": {
            "error": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "errors_Incurred": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/InvalidInputError_errors_Incurred"
              }
            }
          }
        },
        "NoUpdateDataError": {
          "type": "object",
          "properties": {
            "error": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            }
          }
        },
        "IncorrectCredentialsError": {
          "type": "object",
          "properties": {
            "error": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            }
          }
        },
        "UserNotFoundError": {
          "type": "object",
          "properties": {
            "error": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            }
          }
        },
        "UnauthorizedFieldsError": {
          "type": "object",
          "properties": {
            "error": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "unchangeableFields": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "ProjectNotFoundError": {
          "type": "object",
          "properties": {
            "error": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            }
          }
        },
        "LocationNotFoundError": {
          "type": "object",
          "properties": {
            "error": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            }
          }
        },
        "UserExistsError": {
          "type": "object",
          "properties": {
            "error": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            }
          }
        },
        "EmailInUseError": {
          "type": "object",
          "properties": {
            "error": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            }
          }
        },
        "MobileInUseError": {
          "type": "object",
          "properties": {
            "error": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            }
          }
        },
        "EmailAndMobileInUseError": {
          "type": "object",
          "properties": {
            "error": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            }
          }
        },
        "ProjectNameExistsError": {
          "type": "object",
          "properties": {
            "error": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            }
          }
        },
        "LocationExistsError": {
          "type": "object",
          "properties": {
            "error": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            }
          }
        },
        "ValidationError": {
          "type": "object",
          "properties": {
            "error": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "errors_Incurred": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/InvalidInputError_errors_Incurred"
              }
            }
          }
        },
        "InternalServerError": {
          "type": "object",
          "properties": {
            "error": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            }
          }
        },
        "inline_response_400": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/MissingFieldsError"
            },
            {
              "$ref": "#/components/schemas/InvalidInputError"
            },
            {
              "$ref": "#/components/schemas/NoUpdateDataError"
            }
          ]
        },
        "inline_response_409": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/UserExistsError"
            },
            {
              "$ref": "#/components/schemas/EmailInUseError"
            },
            {
              "$ref": "#/components/schemas/MobileInUseError"
            },
            {
              "$ref": "#/components/schemas/EmailAndMobileInUseError"
            },
            {
              "$ref": "#/components/schemas/ProjectNameExistsError"
            },
            {
              "$ref": "#/components/schemas/LocationExistsError"
            }
          ]
        },
        "inline_response_401": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/IncorrectCredentialsError"
            },
            {
              "$ref": "#/components/schemas/UserNotFoundError"
            }
          ]
        },
        "inline_response_404": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/UserNotFoundError"
            },
            {
              "$ref": "#/components/schemas/ProjectNotFoundError"
            },
            {
              "$ref": "#/components/schemas/LocationNotFoundError"
            }
          ]
        },
        "inline_response_200": {
          "type": "object",
          "properties": {
            "occupantID": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "role": {
              "type": "string"
            }
          }
        },
        "inline_response_404_1": {
          "type": "object",
          "properties": {
            "error": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            }
          }
        },
        "inline_response_403": {
          "type": "object",
          "properties": {
            "error": {
              "type": "boolean",
              "example": true
            },
            "message": {
              "type": "string",
              "example": "You do not have permission to perform this action."
            }
          }
        },
        "inline_response_422": {
          "type": "object",
          "properties": {
            "error": {
              "type": "boolean",
              "example": true
            },
            "message": {
              "type": "string",
              "example": "Validation error: Invalid input data."
            },
            "errors_Incurred": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "field": {
                    "type": "string",
                    "example": "field_name"
                  },
                  "message": {
                    "type": "string",
                    "example": "Description of the error related to the field."
                  }
                }
              },
              "example": [
                {
                  "field": "email",
                  "message": "Invalid email format."
                },
                {
                  "field": "password",
                  "message": "Password must be at least 8 characters long."
                }
              ]
            }
          }
        },
        "meetingID_occupants_body": {
          "required": [
            "name",
            "role"
          ],
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "role": {
              "type": "string"
            }
          }
        },
        "occupants_occupantID_body": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "role": {
              "type": "string"
            }
          }
        },
        "LoginResponse_bearer_token": {
          "type": "object",
          "properties": {
            "token": {
              "type": "string",
              "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
            },
            "expires_in": {
              "type": "integer",
              "example": 3600
            }
          }
        },
        "UpdateUserResponse_updatedFields": {
          "type": "object",
          "properties": {
            "first_name": {
              "type": "string",
              "example": "John"
            },
            "last_name": {
              "type": "string",
              "example": "Doe"
            },
            "email": {
              "type": "string",
              "example": "john.doe@example.com"
            }
          }
        },
        "UpdatePasswordResponse_updatedFields": {
          "type": "object",
          "properties": {
            "password": {
              "type": "string",
              "example": "Password1!"
            },
            "bearer_token": {
              "type": "integer",
              "example": 3600
            }
          }
        },
        "UpdatePinResponse_updatedFields": {
          "type": "object",
          "properties": {
            "pin": {
              "pattern": "^\\\\d{6}$",
              "type": "string",
              "example": "123456"
            },
            "bearer_token": {
              "type": "integer",
              "example": 3600
            }
          }
        },
        "ToolboxTalkForm_action_items": {
          "type": "object",
          "properties": {
            "description": {
              "type": "string"
            },
            "assigned_to": {
              "type": "integer"
            },
            "due_date": {
              "type": "string",
              "format": "date"
            }
          }
        },
        "InvalidInputError_errors_Incurred": {
          "type": "object",
          "properties": {
            "field": {
              "type": "string"
            },
            "message": {
              "type": "string"
            }
          }
        }
      },
      "responses": {
        "BadRequest": {
          "description": "Bad Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/inline_response_400"
              },
              "examples": {
                "missingFields": {
                  "value": {
                    "error": true,
                    "message": "Request body incomplete, required fields are missing",
                    "missingFields": [
                      "email",
                      "password",
                      "first_name",
                      "last_name",
                      "access_level",
                      "employment_status",
                      "job_title",
                      "employment_type",
                      "external_user",
                      "mobile_number"
                    ]
                  }
                },
                "invalidInput": {
                  "value": {
                    "error": true,
                    "message": "Invalid input data",
                    "errors_Incurred": [
                      {
                        "field": "first_name",
                        "message": "Invalid 'first_name': must be a non-empty string and less than 255 characters."
                      },
                      {
                        "field": "last_name",
                        "message": "Invalid 'last_name': must be a non-empty string and less than 255 characters."
                      },
                      {
                        "field": "email",
                        "message": "Invalid 'email': must be in the format local-part@domain."
                      },
                      {
                        "field": "mobile_number",
                        "message": "Invalid 'mobile_number': must be an Australian phone number."
                      },
                      {
                        "field": "access_level",
                        "message": "Invalid 'access_level': must be one of 'TOP', 'MIDDLE', 'LOW'."
                      },
                      {
                        "field": "employment_status",
                        "message": "Invalid 'employment_status': must be one of 'Self Employed', 'Full Time', 'Casual', 'Volunteer', 'Shift Work', 'Part Time'."
                      },
                      {
                        "field": "job_title",
                        "message": "Invalid 'job_title': must be one of 'Worker', 'Supervisor', 'Manager', 'Senior Manager', 'Contractor', 'Supplier', 'Visitor'."
                      },
                      {
                        "field": "employment_type",
                        "message": "Invalid 'employment_type': must be one of 'Administration', 'Technical', 'Tradesperson', 'Apprentice/Trainee', 'Student', 'Professional'."
                      },
                      {
                        "field": "external_user",
                        "message": "Invalid 'external_user': must be a boolean (true or false)."
                      },
                      {
                        "field": "DOB",
                        "message": "Invalid 'DOB': must be a valid string date in DD/MM/YYYY format before today."
                      }
                    ]
                  }
                },
                "noUpdateData": {
                  "value": {
                    "error": true,
                    "message": "No update data provided"
                  }
                }
              }
            }
          }
        },
        "Unauthorized": {
          "description": "Unauthorized",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/inline_response_401"
              },
              "examples": {
                "incorrectCredentials": {
                  "value": {
                    "error": true,
                    "message": "Incorrect combination of email/phone and password"
                  }
                },
                "userNotFound": {
                  "value": {
                    "error": true,
                    "message": "User not found"
                  }
                }
              }
            }
          }
        },
        "Forbidden": {
          "description": "Forbidden",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnauthorizedFieldsError"
              },
              "example": {
                "error": true,
                "message": "You are attempting to change fields you are not authorized for",
                "unchangeableFields": [
                  "bearer_token",
                  "userID",
                  "email_hash",
                  "pin",
                  "mobile_hash"
                ]
              }
            }
          }
        },
        "NotFound": {
          "description": "Not Found",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/inline_response_404"
              },
              "examples": {
                "userNotFound": {
                  "value": {
                    "error": true,
                    "message": "User not found"
                  }
                },
                "projectNotFound": {
                  "value": {
                    "error": true,
                    "message": "Project not found"
                  }
                },
                "locationNotFound": {
                  "value": {
                    "error": true,
                    "message": "Location not found"
                  }
                }
              }
            }
          }
        },
        "Conflict": {
          "description": "Conflict",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/inline_response_409"
              },
              "examples": {
                "userExists": {
                  "value": {
                    "error": true,
                    "message": "User already exists"
                  }
                },
                "emailInUse": {
                  "value": {
                    "error": true,
                    "message": "Email already in use by another user"
                  }
                },
                "mobileInUse": {
                  "value": {
                    "error": true,
                    "message": "Mobile number already in use by another user"
                  }
                },
                "emailAndMobileInUse": {
                  "value": {
                    "error": true,
                    "message": "Mobile number and email already in use by another user"
                  }
                },
                "projectNameExists": {
                  "value": {
                    "error": true,
                    "message": "Project name already exists"
                  }
                },
                "locationExists": {
                  "value": {
                    "error": true,
                    "message": "A location with the same name and address already exists"
                  }
                }
              }
            }
          }
        },
        "UnprocessableEntity": {
          "description": "Unprocessable Entity",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidationError"
              },
              "example": {
                "error": true,
                "message": "Invalid input data",
                "errors_Incurred": [
                  {
                    "field": "email",
                    "message": "Invalid email format"
                  },
                  {
                    "field": "password",
                    "message": "Password must be at least 8 characters long"
                  }
                ]
              }
            }
          }
        },
        "InternalServerError": {
          "description": "Internal Server Error has occured",
          "content": {
            "applications/json": {
              "schema": {
                "$ref": "#/components/schemas/InternalServerError"
              },
              "example": {
                "error": true,
                "message": "Whoops! An internal server error has occured"
              }
            }
          }
        }
      },
      "securitySchemes": {
        "BearerAuth": {
          "type": "http",
          "description": "Use a JWT token prefixed with \"Bearer: \" in the Authorization header",
          "scheme": "bearer",
          "bearerFormat": "JWT"
        }
      }
    }
  },
  "customOptions": {}
};
  url = options.swaggerUrl || url
  var urls = options.swaggerUrls
  var customOptions = options.customOptions
  var spec1 = options.swaggerDoc
  var swaggerOptions = {
    spec: spec1,
    url: url,
    urls: urls,
    dom_id: '#swagger-ui',
    deepLinking: true,
    presets: [
      SwaggerUIBundle.presets.apis,
      SwaggerUIStandalonePreset
    ],
    plugins: [
      SwaggerUIBundle.plugins.DownloadUrl
    ],
    layout: "StandaloneLayout"
  }
  for (var attrname in customOptions) {
    swaggerOptions[attrname] = customOptions[attrname];
  }
  var ui = SwaggerUIBundle(swaggerOptions)

  if (customOptions.oauth) {
    ui.initOAuth(customOptions.oauth)
  }

  if (customOptions.preauthorizeApiKey) {
    const key = customOptions.preauthorizeApiKey.authDefinitionKey;
    const value = customOptions.preauthorizeApiKey.apiKeyValue;
    if (!!key && !!value) {
      const pid = setInterval(() => {
        const authorized = ui.preauthorizeApiKey(key, value);
        if(!!authorized) clearInterval(pid);
      }, 500)

    }
  }

  if (customOptions.authAction) {
    ui.authActions.authorize(customOptions.authAction)
  }

  window.ui = ui
}
